#! Catrobat Language Version 0.1
Program 'The Binding of Krishna' {
  Metadata {
    Description: 'Upon hearing a prophecy about his future, king Kansa decides to kill Krishna, the predicted reason his downfall. Kansa sends his demons to kill Krishna and eventually decides that Krishna should die by Kansa’s hand. \n\nCredits\n\nSpecial thanks to \nEdmund McMillen for letting us base The Binding of Krishna on ideas from his awesome game The Binding of Isaac (© McMillen Games Inc.)\n\nDevelopers\n\nAsel Peiris\nIgor Ershov\nMikhaelle Bueno\nVaibhav Anand \nAjay Sharvesh M P\n\nMentors\n\nWolfgang Slany\nAndreas Lukita\nAsh Green\nJordan Smith\nRobert Painsi\n\nExternal Contributors\n\nNur El-din\nZulfiqur Ali\nSalah Uddin\nKyoko Slany\nKirshan Kumar Luhana\nAdonis De Los Angeles Vargas\nÖmer Faruk Halici\nRidvan Aydin\nIlya Chelak\nSimon Mong\nŁukasz Ameljan\nSunGwan Han\nMori Shohei',
    Catrobat version: '1.12',
    Catrobat app version: '0.9.67'
  }

  Stage {
    Landscape mode: 'true',
    Width: '1480',
    Height: '720',
    Display mode: 'MAXIMIZE'
  }

  Globals {
    "KrishnaX",
    "KrishnaY",
    "touchAreaFingerIndex",
    "LeftJoystickPositionX",
    "LeftJoystickPositionY",
    "JoyStickX",
    "JoyStickY",
    "DoorWaitTime",
    "DoorLockedStatus",
    "MaxHealthPoints",
    "CurrentHealthPoints",
    "HealthCreatorHelper",
    "projectileDirection",
    "projectileFingerIndex",
    "ProjectileJoystickX",
    "ProjectileJoystickY",
    "Global-RockSpawnX",
    "Global-RockSpawnY",
    "Const-EnglishLanguage",
    "Const-HindiLanguage",
    "Global-CurrentLanguage",
    "simple bat enemy position x",
    "position y of simple bat enemy",
    "KrishnaProtected",
    "Coin Is Picked",
    "Coin Look Iterator",
    "Coin Count",
    "Picked Coins",
    "Initial number of bombs",
    "Actual number of bombs",
    "Random Number",
    "Protected period",
    "Global-ItemspawnX",
    "Global-ItemspawnY",
    "global-firststart",
    "Const-PortogueseLanguage",
    "Const-ItalianLanguage",
    "Const-SinhalaLanguage",
    "savedlanguage",
    "currentcaption",
    "caption",
    "Wave Number",
    "Teleport Bat Number",
    "KrishnamoveX",
    "krishnamoveY",
    "movement speed",
    "Enemy wave",
    "Follower bat difficulty",
    "bat position x",
    "bat position y",
    "Teleport bat difficulty",
    "global-initialnumberofHealthPotions",
    "global-actualnumberofHealthPotions",
    "Initial number of invulnerability potions",
    "actual number of invulnerability potions",
    "initial number of agility potions",
    "actual number of agility potions",
    "Const-GermanLanguage",
    "Const-JapaneseLanguage",
    "Const-TamilLanguage",
    "Const-BengaliLanguage",
    "Const-KannadaLanguage",
    "Const-FrenchLanguage",
    "Const-RussianLanguage",
    "Const-PolishLanguage",
    "Const-ArabicLanguage",
    "Const-UrduLanguage",
    "Const-SindhiLanguage",
    "Const-SpanishLanguage",
    "KrishnamoveY",
    "Bomb wait time",
    "Initial Level",
    "BossHp",
    "Krishna tutorial",
    "Total Number of Enemies",
    "Current Scene",
    "Rock crow random composition",
    "Rock crown difficulty",
    "Purple crow difficulty",
    "number of rock crow",
    "number of purple crow",
    "Is tutorial",
    "local-random attack",
    "global-putnaposition",
    "Orange Crow X",
    "Orange Crow Y",
    "number of green crow",
    "number of orange crow",
    "global-firststarthealth",
    "global-putnaexists",
    "Krishna's motion direction",
    "Direction of shooting",
    "scene",
    "Item spawned",
    "Dead bat created",
    "freesound",
    "opengameart",
    "freesound2",
    "artcredit",
    "Const-IndonesianLanguage",
    "Const-ChineseLanguage",
    "Const-KoreanLanguage",
    "Const-PersianLanguage",
    "Const-TurkishLanguage",
    "Const-VietnameseLanguage",
    "Const-GujaratiLanguage",
    "Const-MarathiLanguage",
    "Const-PunjabiLanguage",
    *Local-Allrockpositions*,
    *LanguageList- Play*,
    *LanguageList-Options*,
    *LanguageList-Languages*,
    *Language List-Caption*,
    *LanguageList-Shop*,
    *LanguageList-HealthPotion*,
    *LanguageList-AgilityPotion*,
    *LanguageList-InvulnerabilityPotion*,
    *LanguageList-Italian*,
    *LanguageList-Hindi*,
    *LanguageList-Portuguese*,
    *LanguageList-German*,
    *LanguageList-Japanese*,
    *LanguageList-French*,
    *Bats death positions*,
    *Item spawn positions*,
    *LanguageList-Bengali*,
    *LanguageList-Tamil*,
    *LanguageList-Urdu*,
    *LanguageList-Sindhi*,
    *LanguageList-Indonesian*,
    *LanguageList-Arabic*,
    *LanguageList-Chinese*,
    *LanguageList-Russian*,
    *LanguageList-Polish*,
    *LanguageList-Spanish*,
    *LanguageList-Korean*,
    *LanguageList-Turkish*,
    *LanguageList-Vietnamese*,
    *LanguageList-Punjabi*
  }

  Scene 'Main Menu' {
    Background {
      Looks {
        'new_back': '2019_08_23_051323.png'
      }
      Sounds {
        'background 1 (1)': 'background 1_#0.mp3'
      }
      Scripts {
        When scene starts {
          Broadcast and wait (message: ('BuildLanguage'));
          Set (variable: ("Picked Coins"), value: (0));
          Start (sound: ('background 1 (1)'));
        }
        When scene starts {
          Write on device (variable: ("Picked Coins"));
          Write on device (variable: ("global-actualnumberofHealthPotions"));
          Write on device (variable: ("actual number of invulnerability potions"));
          Write on device (variable: ("actual number of agility potions"));
        }
      }
    }
    Actor or object 'Play' {
      Looks {
        'button': 'button.png'
      }
      Locals {
        "displaytext"
      }
      Scripts {
        When condition becomes true (condition: ("savedlanguage" ≠ "Global-CurrentLanguage")) {
          Set (variable: ("savedlanguage"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList- Play* )));
        }
        When scene starts {
          Set (variable: ("displaytext"), value: (1));
          Place at (x: (5), y: (38));
          Wait (seconds: (0.1));
          Set (variable: ("savedlanguage"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList- Play* )));
          Show (variable: ("displaytext"), x: (5), y: (52), size: (90), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (80));
          Wait (seconds: (0.1));
          Start (scene: ('Introduction'));
        }
      }
    }
    Actor or object 'Options' {
      Looks {
        'button': 'button_#0.png'
      }
      Locals {
        "displayedtexr"
      }
      Scripts {
        When scene starts {
          Place at (x: (21), y: (- 128));
          Wait (seconds: (0.2));
          Set (variable: ("displayedtexr"), value: (item( "Global-CurrentLanguage" , *LanguageList-Options* )));
          Show (variable: ("displayedtexr"), x: (21), y: (- 110), size: (90), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (80));
          Wait (seconds: (0.1));
          Start (scene: ('Settings'));
        }
      }
    }
    Actor or object 'Language Controller' {
      Scripts {
        When scene starts {
          If (condition: ("global-firststart" = 0)) {
            Set (variable: ("Global-CurrentLanguage"), value: (1));
            Set (variable: ("global-firststart"), value: (1));
          }
          Broadcast (message: ('BuildLanguage'));
        }
        When scene starts {
          Set (variable: ("Const-EnglishLanguage"), value: (1));
          Set (variable: ("Const-HindiLanguage"), value: (2));
          Set (variable: ("Const-ItalianLanguage"), value: (3));
          Set (variable: ("Const-PortogueseLanguage"), value: (4));
          Set (variable: ("Const-SinhalaLanguage"), value: (5));
          Set (variable: ("Const-GermanLanguage"), value: (6));
          Set (variable: ("Const-JapaneseLanguage"), value: (7));
          Set (variable: ("Const-FrenchLanguage"), value: (8));
          Set (variable: ("Const-BengaliLanguage"), value: (9));
          Set (variable: ("Const-TamilLanguage"), value: (10));
          Set (variable: ("Const-KannadaLanguage"), value: (11));
          Set (variable: ("Const-UrduLanguage"), value: (12));
          Set (variable: ("Const-SindhiLanguage"), value: (13));
          Set (variable: ("Const-IndonesianLanguage"), value: (14));
          Set (variable: ("Const-ArabicLanguage"), value: (15));
          Set (variable: ("Const-ChineseLanguage"), value: (16));
          Set (variable: ("Const-RussianLanguage"), value: (17));
          Set (variable: ("Const-PolishLanguage"), value: (18));
          Set (variable: ("Const-SpanishLanguage"), value: (19));
          Set (variable: ("Const-KoreanLanguage"), value: (20));
          Set (variable: ("Const-PersianLanguage"), value: (21));
          Set (variable: ("Const-TurkishLanguage"), value: (22));
          Set (variable: ("Const-VietnameseLanguage"), value: (23));
          Set (variable: ("Const-GujaratiLanguage"), value: (24));
          Set (variable: ("Const-MarathiLanguage"), value: (25));
          Set (variable: ("Const-PunjabiLanguage"), value: (26));
          Insert (list: (*LanguageList- Play*), position: ("Const-EnglishLanguage"), value: ('Play'));
          Insert (list: (*LanguageList- Play*), position: ("Const-HindiLanguage"), value: ('प्ले'));
          Insert (list: (*LanguageList- Play*), position: ("Const-PortogueseLanguage"), value: ('Jogar'));
          Insert (list: (*LanguageList- Play*), position: ("Const-ItalianLanguage"), value: ('Gioca'));
          Insert (list: (*LanguageList- Play*), position: ("Const-SinhalaLanguage"), value: ('සෙල්ලම් කරන්න'));
          Insert (list: (*LanguageList- Play*), position: ("Const-GermanLanguage"), value: ('Spielen'));
          Insert (list: (*LanguageList- Play*), position: ("Const-JapaneseLanguage"), value: ('スタート'));
          Insert (list: (*LanguageList- Play*), position: ("Const-FrenchLanguage"), value: ('Jouer'));
          Insert (list: (*LanguageList- Play*), position: ("Const-BengaliLanguage"), value: ('আরম্ভ'));
          Insert (list: (*LanguageList- Play*), position: ("Const-TamilLanguage"), value: ('விளையாடு'));
          Insert (list: (*LanguageList- Play*), position: ("Const-UrduLanguage"), value: ('کيڏيو'));
          Insert (list: (*LanguageList- Play*), position: ("Const-SindhiLanguage"), value: ('چلائیں'));
          Insert (list: (*LanguageList- Play*), position: ("Const-IndonesianLanguage"), value: ('Mulai'));
          Insert (list: (*LanguageList- Play*), position: ("Const-ArabicLanguage"), value: ('إلعب'));
          Insert (list: (*LanguageList- Play*), position: ("Const-ChineseLanguage"), value: ('开始'));
          Insert (list: (*LanguageList- Play*), position: ("Const-RussianLanguage"), value: ('Играть'));
          Insert (list: (*LanguageList- Play*), position: ("Const-PolishLanguage"), value: ('Graj'));
          Insert (list: (*LanguageList- Play*), position: ("Const-SpanishLanguage"), value: ('Jugar'));
          Insert (list: (*LanguageList- Play*), position: ("Const-KoreanLanguage"), value: ('시작'));
          Insert (list: (*LanguageList- Play*), position: ("Const-TurkishLanguage"), value: ('Oynamak'));
          Insert (list: (*LanguageList- Play*), position: ("Const-VietnameseLanguage"), value: ('Chơi'));
          Insert (list: (*LanguageList- Play*), position: ("Const-PunjabiLanguage"), value: ('ਖੇਡੋ'));
          Insert (list: (*LanguageList-Options*), position: ("Const-EnglishLanguage"), value: ('Options'));
          Insert (list: (*LanguageList-Options*), position: ("Const-HindiLanguage"), value: ('विकल्प'));
          Insert (list: (*LanguageList-Options*), position: ("Const-PortogueseLanguage"), value: ('Opções'));
          Insert (list: (*LanguageList-Options*), position: ("Const-ItalianLanguage"), value: ('Opzioni'));
          Insert (list: (*LanguageList-Options*), position: ("Const-SinhalaLanguage"), value: ('විකල්ප'));
          Insert (list: (*LanguageList-Options*), position: ("Const-GermanLanguage"), value: ('Optionen'));
          Insert (list: (*LanguageList-Options*), position: ("Const-JapaneseLanguage"), value: ('設定'));
          Insert (list: (*LanguageList-Options*), position: ("Const-FrenchLanguage"), value: ('Options'));
          Insert (list: (*LanguageList-Options*), position: ("Const-BengaliLanguage"), value: ('সাজিয়ে নিন'));
          Insert (list: (*LanguageList-Options*), position: ("Const-TamilLanguage"), value: ('விருப்பங்கள்'));
          Insert (list: (*LanguageList-Options*), position: ("Const-UrduLanguage"), value: ('اختیارات'));
          Insert (list: (*LanguageList-Options*), position: ("Const-SindhiLanguage"), value: ('چونڊ'));
          Insert (list: (*LanguageList-Options*), position: ("Const-IndonesianLanguage"), value: ('Pengaturan'));
          Insert (list: (*LanguageList-Options*), position: ("Const-IndonesianLanguage"), value: ('Pengaturan'));
          Insert (list: (*LanguageList-Options*), position: ("Const-ArabicLanguage"), value: ('الخيارات'));
          Insert (list: (*LanguageList-Options*), position: ("Const-ChineseLanguage"), value: ('选项'));
          Insert (list: (*LanguageList-Options*), position: ("Const-RussianLanguage"), value: ('Настройки'));
          Insert (list: (*LanguageList-Options*), position: ("Const-PolishLanguage"), value: ('Opcje'));
          Insert (list: (*LanguageList-Options*), position: ("Const-SpanishLanguage"), value: ('Opciones'));
          Insert (list: (*LanguageList-Options*), position: ("Const-KoreanLanguage"), value: ('설정'));
          Insert (list: (*LanguageList-Options*), position: ("Const-TurkishLanguage"), value: ('Secenekler'));
          Insert (list: (*LanguageList-Options*), position: ("Const-VietnameseLanguage"), value: ('ਵਿਕਲਪ'));
          Insert (list: (*LanguageList-Options*), position: ("Const-PunjabiLanguage"), value: ('Tùy chọn'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-EnglishLanguage"), value: ('Languages'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-HindiLanguage"), value: ('भाषा'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-PortogueseLanguage"), value: ('Idiomas'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-ItalianLanguage"), value: ('Linguaggi'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-SinhalaLanguage"), value: ('භාෂා'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-GermanLanguage"), value: ('Sprachen'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-JapaneseLanguage"), value: ('言語'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-FrenchLanguage"), value: ('Langages'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-BengaliLanguage"), value: ('ভাষাসমূহ'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-TamilLanguage"), value: ('மொழிகள்'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-UrduLanguage"), value: ('زبانیں'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-SindhiLanguage"), value: ('زبانون'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-IndonesianLanguage"), value: ('Bahasa'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-IndonesianLanguage"), value: ('Bahasa'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-ArabicLanguage"), value: ('اللغات'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-ChineseLanguage"), value: ('语言'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-RussianLanguage"), value: ('Язык'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-PolishLanguage"), value: ('Język'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-SpanishLanguage"), value: ('Idiomas'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-KoreanLanguage"), value: ('언어'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-TurkishLanguage"), value: ('Diller'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-VietnameseLanguage"), value: ('Ngôn ngữ'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-PunjabiLanguage"), value: ('ਭਾਸ਼ਾ'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-EnglishLanguage"), value: ('Shop'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-HindiLanguage"), value: ('दुकान'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-ItalianLanguage"), value: ('\rNegozio'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-PortogueseLanguage"), value: ('Comprar'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-SinhalaLanguage"), value: ('සාප්පුව'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-GermanLanguage"), value: ('Geschäft'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-JapaneseLanguage"), value: ('ショップ'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-FrenchLanguage"), value: ('boutique'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-EnglishLanguage"), value: ('Health potion'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-HindiLanguage"), value: ('संजीवनी'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-PortogueseLanguage"), value: ('Poção de saúde'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-ItalianLanguage"), value: ('Pozione di salute'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-SinhalaLanguage"), value: ('සෞඛ්‍ය බඳුන'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-GermanLanguage"), value: ('Heiltrank'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-JapaneseLanguage"), value: ('健康ドリンク'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-FrenchLanguage"), value: ('Potion de vie'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-BengaliLanguage"), value: ('সমুদয় আয়ু'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-TamilLanguage"), value: ('உடல் ஆரோக்கியம்'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-UrduLanguage"), value: ('صحت کی دوائیاں'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-SindhiLanguage"), value: ('صحتيابي جي دوا'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-IndonesianLanguage"), value: ('Ramuan darah'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-ArabicLanguage"), value: ('جرعة صحة'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-ChineseLanguage"), value: ('健康药水'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-RussianLanguage"), value: ('Зелье здоровья'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-PolishLanguage"), value: ('Mikstura zdrowia'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-SpanishLanguage"), value: ('Poción de Salud'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-KoreanLanguage"), value: ('건강의 물약'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-TurkishLanguage"), value: ('Can iksiri'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-VietnameseLanguage"), value: ('Lọ thuốc tăng sức khỏe'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-PunjabiLanguage"), value: ('ਸੰਜੀਵਨੀ'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-EnglishLanguage"), value: ('Agility Potion'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-HindiLanguage"), value: ('गति वर्धक'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-PortogueseLanguage"), value: ('Poção de agilidade'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-ItalianLanguage"), value: ('Pozione di agilità'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-SinhalaLanguage"), value: ('ක්‍රියාශීලී බඳුන'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-GermanLanguage"), value: ('Energietrank'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-JapaneseLanguage"), value: ('敏速力強化ドリンク'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-FrenchLanguage"), value: ('Potion d\'agilité'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-BengaliLanguage"), value: ('গতি বৃদ্ধি'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-TamilLanguage"), value: ('சுகாதார ஆட்டம்'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-UrduLanguage"), value: ('توانائی دوائیاں'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-SindhiLanguage"), value: ('توانائي جي دوا'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-IndonesianLanguage"), value: ('Ramuan kelincahan'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-ArabicLanguage"), value: ('جرعة رشاقة'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-ChineseLanguage"), value: ('敏捷药水'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-RussianLanguage"), value: ('Зелье ловкости'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-PolishLanguage"), value: ('Mikstura zwinności'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-SpanishLanguage"), value: ('Poción de Agilidad'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-KoreanLanguage"), value: ('민첩성 물약'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-TurkishLanguage"), value: ('Ceviklik İksiri'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-VietnameseLanguage"), value: ('Lọ thuốc tăng sự nhanh nhẹn'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-PunjabiLanguage"), value: ('ਸਪੀਡ ਬੂਸਟਰ'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-EnglishLanguage"), value: ('Invulnerability potion'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-HindiLanguage"), value: ('अमृत'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-PortogueseLanguage"), value: ('Poção de invulnerabilidade '));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-ItalianLanguage"), value: ('Pozione di invulnerabilità'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-SinhalaLanguage"), value: ('අනිත්‍යතාව බඳුන'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-GermanLanguage"), value: ('Unbesiegbarkeitstrank'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-JapaneseLanguage"), value: ('無敵ポーション'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-FrenchLanguage"), value: ('Potion d\'invulnérabilité'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-BengaliLanguage"), value: ('অদৃশ্য'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-TamilLanguage"), value: ('பாதிப்பற்ற ஆட்டம்'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-UrduLanguage"), value: ('  جو ضرر سے محفوظ  دوائیاں '));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-SindhiLanguage"), value: ('محفوظ رهڻ جي دوا'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-IndonesianLanguage"), value: ('Ramuan kebal'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-ArabicLanguage"), value: ('جرعة حصانة'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-ChineseLanguage"), value: ('无敌药水'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-RussianLanguage"), value: ('Зелье неуязвимости'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-PolishLanguage"), value: ('Mikstura niewrażliwości'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-SpanishLanguage"), value: ('Poción de Invulnerabilidad'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-KoreanLanguage"), value: ('무적의 물약'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-TurkishLanguage"), value: ('Ölümsüzlük İksiri'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-VietnameseLanguage"), value: ('Lọ thuốc chống sát thương'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-PunjabiLanguage"), value: ('ਅਮ੍ਰਿਤ'));
        }
        When you receive (message: ('BuildLanguage')) {
          Set (variable: ("Const-EnglishLanguage"), value: (1));
          Set (variable: ("Const-HindiLanguage"), value: (2));
          Set (variable: ("Const-ItalianLanguage"), value: (3));
          Set (variable: ("Const-PortogueseLanguage"), value: (4));
          Set (variable: ("Const-SinhalaLanguage"), value: (5));
          Set (variable: ("Const-GermanLanguage"), value: (6));
          Set (variable: ("Const-JapaneseLanguage"), value: (7));
          Set (variable: ("Const-FrenchLanguage"), value: (8));
          Set (variable: ("Const-BengaliLanguage"), value: (9));
          Set (variable: ("Const-TamilLanguage"), value: (10));
          Set (variable: ("Const-KannadaLanguage"), value: (11));
          Set (variable: ("Const-UrduLanguage"), value: (12));
          Set (variable: ("Const-SindhiLanguage"), value: (13));
          Set (variable: ("Const-IndonesianLanguage"), value: (14));
          Set (variable: ("Const-ArabicLanguage"), value: (15));
          Set (variable: ("Const-ChineseLanguage"), value: (16));
          Set (variable: ("Const-RussianLanguage"), value: (17));
          Set (variable: ("Const-PolishLanguage"), value: (18));
          Set (variable: ("Const-SpanishLanguage"), value: (19));
          Set (variable: ("Const-KoreanLanguage"), value: (20));
          Set (variable: ("Const-PersianLanguage"), value: (21));
          Set (variable: ("Const-TurkishLanguage"), value: (22));
          Set (variable: ("Const-VietnameseLanguage"), value: (23));
          Set (variable: ("Const-GujaratiLanguage"), value: (24));
          Set (variable: ("Const-MarathiLanguage"), value: (25));
          Set (variable: ("Const-PunjabiLanguage"), value: (26));
          Insert (list: (*LanguageList- Play*), position: ("Const-EnglishLanguage"), value: ('Play'));
          Insert (list: (*LanguageList- Play*), position: ("Const-HindiLanguage"), value: ('प्ले'));
          Insert (list: (*LanguageList- Play*), position: ("Const-PortogueseLanguage"), value: ('Jogar'));
          Insert (list: (*LanguageList- Play*), position: ("Const-ItalianLanguage"), value: ('Gioca'));
          Insert (list: (*LanguageList- Play*), position: ("Const-SinhalaLanguage"), value: ('සෙල්ලම් කරන්න'));
          Insert (list: (*LanguageList- Play*), position: ("Const-GermanLanguage"), value: ('Spielen'));
          Insert (list: (*LanguageList- Play*), position: ("Const-JapaneseLanguage"), value: ('スタート'));
          Insert (list: (*LanguageList- Play*), position: ("Const-FrenchLanguage"), value: ('Jouer'));
          Insert (list: (*LanguageList- Play*), position: ("Const-BengaliLanguage"), value: ('আরম্ভ'));
          Insert (list: (*LanguageList- Play*), position: ("Const-TamilLanguage"), value: ('விளையாடு'));
          Insert (list: (*LanguageList- Play*), position: ("Const-UrduLanguage"), value: ('کيڏيو'));
          Insert (list: (*LanguageList- Play*), position: ("Const-SindhiLanguage"), value: ('چلائیں'));
          Insert (list: (*LanguageList- Play*), position: ("Const-IndonesianLanguage"), value: ('Mulai'));
          Insert (list: (*LanguageList- Play*), position: ("Const-ArabicLanguage"), value: ('إلعب'));
          Insert (list: (*LanguageList- Play*), position: ("Const-ChineseLanguage"), value: ('开始'));
          Insert (list: (*LanguageList- Play*), position: ("Const-RussianLanguage"), value: ('Играть'));
          Insert (list: (*LanguageList- Play*), position: ("Const-PolishLanguage"), value: ('Graj'));
          Insert (list: (*LanguageList- Play*), position: ("Const-SpanishLanguage"), value: ('Jugar'));
          Insert (list: (*LanguageList- Play*), position: ("Const-KoreanLanguage"), value: ('시작'));
          Insert (list: (*LanguageList- Play*), position: ("Const-TurkishLanguage"), value: ('Oynamak'));
          Insert (list: (*LanguageList- Play*), position: ("Const-VietnameseLanguage"), value: ('Chơi'));
          Insert (list: (*LanguageList- Play*), position: ("Const-PunjabiLanguage"), value: ('ਖੇਡੋ'));
          Insert (list: (*LanguageList-Options*), position: ("Const-EnglishLanguage"), value: ('Options'));
          Insert (list: (*LanguageList-Options*), position: ("Const-HindiLanguage"), value: ('विकल्प'));
          Insert (list: (*LanguageList-Options*), position: ("Const-PortogueseLanguage"), value: ('Opções'));
          Insert (list: (*LanguageList-Options*), position: ("Const-ItalianLanguage"), value: ('Opzioni'));
          Insert (list: (*LanguageList-Options*), position: ("Const-SinhalaLanguage"), value: ('විකල්ප'));
          Insert (list: (*LanguageList-Options*), position: ("Const-GermanLanguage"), value: ('Optionen'));
          Insert (list: (*LanguageList-Options*), position: ("Const-JapaneseLanguage"), value: ('設定'));
          Insert (list: (*LanguageList-Options*), position: ("Const-FrenchLanguage"), value: ('Options'));
          Insert (list: (*LanguageList-Options*), position: ("Const-BengaliLanguage"), value: ('সাজিয়ে নিন'));
          Insert (list: (*LanguageList-Options*), position: ("Const-TamilLanguage"), value: ('விருப்பங்கள்'));
          Insert (list: (*LanguageList-Options*), position: ("Const-UrduLanguage"), value: ('اختیارات'));
          Insert (list: (*LanguageList-Options*), position: ("Const-SindhiLanguage"), value: ('چونڊ'));
          Insert (list: (*LanguageList-Options*), position: ("Const-IndonesianLanguage"), value: ('Pengaturan'));
          Insert (list: (*LanguageList-Options*), position: ("Const-IndonesianLanguage"), value: ('Pengaturan'));
          Insert (list: (*LanguageList-Options*), position: ("Const-ArabicLanguage"), value: ('الخيارات'));
          Insert (list: (*LanguageList-Options*), position: ("Const-ChineseLanguage"), value: ('选项'));
          Insert (list: (*LanguageList-Options*), position: ("Const-RussianLanguage"), value: ('Настройки'));
          Insert (list: (*LanguageList-Options*), position: ("Const-PolishLanguage"), value: ('Opcje'));
          Insert (list: (*LanguageList-Options*), position: ("Const-SpanishLanguage"), value: ('Opciones'));
          Insert (list: (*LanguageList-Options*), position: ("Const-KoreanLanguage"), value: ('설정'));
          Insert (list: (*LanguageList-Options*), position: ("Const-TurkishLanguage"), value: ('Secenekler'));
          Insert (list: (*LanguageList-Options*), position: ("Const-VietnameseLanguage"), value: ('ਵਿਕਲਪ'));
          Insert (list: (*LanguageList-Options*), position: ("Const-PunjabiLanguage"), value: ('Tùy chọn'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-EnglishLanguage"), value: ('Languages'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-HindiLanguage"), value: ('भाषा'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-PortogueseLanguage"), value: ('Idiomas'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-ItalianLanguage"), value: ('Linguaggi'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-SinhalaLanguage"), value: ('භාෂා'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-GermanLanguage"), value: ('Sprachen'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-JapaneseLanguage"), value: ('言語'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-FrenchLanguage"), value: ('Langages'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-BengaliLanguage"), value: ('ভাষাসমূহ'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-TamilLanguage"), value: ('மொழிகள்'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-UrduLanguage"), value: ('زبانیں'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-SindhiLanguage"), value: ('زبانون'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-IndonesianLanguage"), value: ('Bahasa'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-IndonesianLanguage"), value: ('Bahasa'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-ArabicLanguage"), value: ('اللغات'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-ChineseLanguage"), value: ('语言'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-RussianLanguage"), value: ('Язык'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-PolishLanguage"), value: ('Język'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-SpanishLanguage"), value: ('Idiomas'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-KoreanLanguage"), value: ('언어'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-TurkishLanguage"), value: ('Diller'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-VietnameseLanguage"), value: ('Ngôn ngữ'));
          Insert (list: (*LanguageList-Languages*), position: ("Const-PunjabiLanguage"), value: ('ਭਾਸ਼ਾ'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-EnglishLanguage"), value: ('Shop'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-HindiLanguage"), value: ('दुकान'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-ItalianLanguage"), value: ('\rNegozio'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-PortogueseLanguage"), value: ('Comprar'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-SinhalaLanguage"), value: ('සාප්පුව'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-GermanLanguage"), value: ('Geschäft'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-JapaneseLanguage"), value: ('ショップ'));
          Insert (list: (*LanguageList-Shop*), position: ("Const-FrenchLanguage"), value: ('boutique'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-EnglishLanguage"), value: ('Health potion'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-HindiLanguage"), value: ('संजीवनी'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-PortogueseLanguage"), value: ('Poção de saúde'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-ItalianLanguage"), value: ('Pozione di salute'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-SinhalaLanguage"), value: ('සෞඛ්‍ය බඳුන'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-GermanLanguage"), value: ('Heiltrank'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-JapaneseLanguage"), value: ('健康ドリンク'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-FrenchLanguage"), value: ('Potion de vie'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-BengaliLanguage"), value: ('সমুদয় আয়ু'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-TamilLanguage"), value: ('உடல் ஆரோக்கியம்'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-UrduLanguage"), value: ('صحت کی دوائیاں'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-SindhiLanguage"), value: ('صحتيابي جي دوا'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-IndonesianLanguage"), value: ('Ramuan darah'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-ArabicLanguage"), value: ('جرعة صحة'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-ChineseLanguage"), value: ('健康药水'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-RussianLanguage"), value: ('Зелье здоровья'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-PolishLanguage"), value: ('Mikstura zdrowia'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-SpanishLanguage"), value: ('Poción de Salud'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-KoreanLanguage"), value: ('건강의 물약'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-TurkishLanguage"), value: ('Can iksiri'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-VietnameseLanguage"), value: ('Lọ thuốc tăng sức khỏe'));
          Insert (list: (*LanguageList-HealthPotion*), position: ("Const-PunjabiLanguage"), value: ('ਸੰਜੀਵਨੀ'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-EnglishLanguage"), value: ('Agility Potion'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-HindiLanguage"), value: ('गति वर्धक'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-PortogueseLanguage"), value: ('Poção de agilidade'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-ItalianLanguage"), value: ('Pozione di agilità'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-SinhalaLanguage"), value: ('ක්‍රියාශීලී බඳුන'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-GermanLanguage"), value: ('Energietrank'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-JapaneseLanguage"), value: ('敏速力強化ドリンク'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-FrenchLanguage"), value: ('Potion d\'agilité'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-BengaliLanguage"), value: ('গতি বৃদ্ধি'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-TamilLanguage"), value: ('சுகாதார ஆட்டம்'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-UrduLanguage"), value: ('توانائی دوائیاں'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-SindhiLanguage"), value: ('توانائي جي دوا'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-IndonesianLanguage"), value: ('Ramuan kelincahan'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-ArabicLanguage"), value: ('جرعة رشاقة'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-ChineseLanguage"), value: ('敏捷药水'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-RussianLanguage"), value: ('Зелье ловкости'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-PolishLanguage"), value: ('Mikstura zwinności'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-SpanishLanguage"), value: ('Poción de Agilidad'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-KoreanLanguage"), value: ('민첩성 물약'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-TurkishLanguage"), value: ('Ceviklik İksiri'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-VietnameseLanguage"), value: ('Lọ thuốc tăng sự nhanh nhẹn'));
          Insert (list: (*LanguageList-AgilityPotion*), position: ("Const-PunjabiLanguage"), value: ('ਸਪੀਡ ਬੂਸਟਰ'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-EnglishLanguage"), value: ('Invulnerability potion'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-HindiLanguage"), value: ('अमृत'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-PortogueseLanguage"), value: ('Poção de invulnerabilidade '));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-ItalianLanguage"), value: ('Pozione di invulnerabilità'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-SinhalaLanguage"), value: ('අනිත්‍යතාව බඳුන'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-GermanLanguage"), value: ('Unbesiegbarkeitstrank'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-JapaneseLanguage"), value: ('無敵ポーション'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-FrenchLanguage"), value: ('Potion d\'invulnérabilité'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-BengaliLanguage"), value: ('অদৃশ্য'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-TamilLanguage"), value: ('பாதிப்பற்ற ஆட்டம்'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-UrduLanguage"), value: ('  جو ضرر سے محفوظ  دوائیاں '));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-SindhiLanguage"), value: ('محفوظ رهڻ جي دوا'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-IndonesianLanguage"), value: ('Ramuan kebal'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-ArabicLanguage"), value: ('جرعة حصانة'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-ChineseLanguage"), value: ('无敌药水'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-RussianLanguage"), value: ('Зелье неуязвимости'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-PolishLanguage"), value: ('Mikstura niewrażliwości'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-SpanishLanguage"), value: ('Poción de Invulnerabilidad'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-KoreanLanguage"), value: ('무적의 물약'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-TurkishLanguage"), value: ('Ölümsüzlük İksiri'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-VietnameseLanguage"), value: ('Lọ thuốc chống sát thương'));
          Insert (list: (*LanguageList-InvulnerabilityPotion*), position: ("Const-PunjabiLanguage"), value: ('ਅਮ੍ਰਿਤ'));
        }
      }
    }
    Actor or object 'Controller' {
      Looks {
        'Controller': 'My actor or object_#1.png'
      }
      Scripts {
        When scene starts {
          Insert (list: (*Language List-Caption*), position: (1), value: ('Once upon a time there was an evil king named Kansa. He used to torture people for worshiping gods.'));
          Insert (list: (*Language List-Caption*), position: (2), value: ('A prophecy is told that Lord Vishnu himself would reincarnate as a child of Kansa\'s sister to end the life of Kansa'));
          Insert (list: (*Language List-Caption*), position: (3), value: ('On hearing the prophecy, Kansa imprisons his sister thinking he would kill the child on it\'s birth.'));
          Insert (list: (*Language List-Caption*), position: (4), value: ('As Krishna is born, miraculously all the guards in the prison fell asleep. Krishna is then moved to a safe place'));
          Insert (list: (*Language List-Caption*), position: (5), value: ('Krishna is raised up in a safe house, hidden from Kansa. Few year later, little Krishna returns to Kansa\'s Palace'));
          Insert (list: (*Language List-Caption*), position: (6), value: ('The time has come for Krishna to fulfill his destiny. But to reach Kansa, Krishna has to fight through Kansa\'s army.'));
          Insert (list: (*LanguageList-Portuguese*), position: (1), value: ('Era uma vez um rei maligno chamado Kansa. Ele costumava torturar pessoas por adorar os deuses'));
          Insert (list: (*LanguageList-Portuguese*), position: (2), value: ('Uma professia contava que o prórprio Lod Vishnu iria reencarnar como um filho da irmã de Kansa para acabar com a vida de Kansa'));
          Insert (list: (*LanguageList-Portuguese*), position: (3), value: ('Ao ouvir a professia, Kansa aprisionou sua irmã pensando em matar seu filho ao nascer'));
          Insert (list: (*LanguageList-Portuguese*), position: (4), value: ('Quando Krishna nasceu, miraculosamente todos os guardas da prisão pegaram no sono e Krishna conseguiu se mover para um lugar seguro'));
          Insert (list: (*LanguageList-Portuguese*), position: (5), value: ('Krishna é levado a uma casa segura escondido de Kansa. Poucos anos depois o pequeno Krishna retorna para o palácio de Kansa'));
          Insert (list: (*LanguageList-Portuguese*), position: (6), value: ('O tempo de comprir o seu destino chegou para Krishna. Mas para alcançar o Kansa, Krishna tem que lutar contra o seu exército'));
          Insert (list: (*LanguageList-Italian*), position: (1), value: ('C\'era una volta un cattivo re chiamato Kansa. Lui torturava pesone solo perchè credevano nelle divinità'));
          Insert (list: (*LanguageList-Italian*), position: (2), value: ('Una profezia narrò che Lord Virshnu sarebbe reincarnato nel figlio della sorella di Kansa, con lo scopo di ucciderlo'));
          Insert (list: (*LanguageList-Italian*), position: (3), value: ('Quando senti la profezia Kansa imprigionò sua sorella con l\'obiettivo di uccidere il bambino alla nascita'));
          Insert (list: (*LanguageList-Italian*), position: (4), value: ('Quando Krishna nacque, come per miracolo, tutte le guardie caddero addormentate e Krishna fu portato in un posto sicuro'));
          Insert (list: (*LanguageList-Italian*), position: (5), value: ('Krishna viene cresciuto nel posto sicuro, nascosto da Kansa. Pochi anni dopo il piccolo Krishna ritorna al palazzo di Kansa'));
          Insert (list: (*LanguageList-Italian*), position: (6), value: ('E\' giunta l\'ora per Krishna di soddisfare la profezia. Però per raggiungere Kansa, Krishna dovrà combattere contro tutto l\'esercito di Kansa.'));
          Insert (list: (*LanguageList-Hindi*), position: (1), value: ('एक बार कंस नाम का एक दुष्ट राजा था। वह लोगों को देवताओं की पूजा करने के लिए प्रताड़ित करता था।'));
          Insert (list: (*LanguageList-Hindi*), position: (2), value: ('एक भविष्यवाणी में बताया गया है कि कंस का जीवन समाप्त करने के लिए भगवान विष्णु स्वयं कंस की बहन के रूप में पुनर्जन्म लेंगे।'));
          Insert (list: (*LanguageList-Hindi*), position: (3), value: ('भविष्यवाणी सुनने पर, कंस अपनी बहन को यह सोचकर कैद कर लेता है कि वह इस जन्म में बच्चे को मार डालेगा।'));
          Insert (list: (*LanguageList-Hindi*), position: (4), value: ('जैसे ही कृष्ण का जन्म हुआ, चमत्कारिक ढंग से जेल के सभी पहरेदार सो गए, तब कृष्ण को एक सुरक्षित स्थान पर ले जाया गया।'));
          Insert (list: (*LanguageList-Hindi*), position: (5), value: ('कंस से छिपाकर कृष्ण को एक सुरक्षित घर में पाला जाता है। कुछ साल बाद, छोटा कृष्णा कंस के महल में लौट आता है। '));
          Insert (list: (*LanguageList-Hindi*), position: (6), value: ('समय आ गया है कि कृष्ण अपने भाग्य को पूरा करें। लेकिन कंस तक पहुंचने के लिए कृष्ण को कंस की सेना से लड़ना पड़ेगा।'));
          Insert (list: (*LanguageList-German*), position: (1), value: ('Es lebte einstmals ein grausamer König namens Kansa. Er folterte Menschen, weil sie andere Götter anbeteten.'));
          Insert (list: (*LanguageList-German*), position: (2), value: ('Einer Prophezeiung zufolge würde Lord Vishnu selbst als Kind von Kansas Schwester wiedergeboren, um das Leben von Kansa zu beenden.'));
          Insert (list: (*LanguageList-German*), position: (3), value: ('Als Kansa die Prophezeiung hört, sperrt er seine Schwester ein, weil er plant, das Kind bei seiner Geburt zu töten.'));
          Insert (list: (*LanguageList-German*), position: (4), value: ('Als Krishna geboren wird, sind auf wundersame Weise alle Wachen im Gefängnis eingeschlafen, und Krishna wird an einen sicheren Ort gebracht.'));
          Insert (list: (*LanguageList-German*), position: (5), value: ('Krishna wächst an einem sicheren Ort auf, der vor Kansa versteckt ist. Wenige Jahre später kehrt der kleine Krishna in Kansas Palast zurück.'));
          Insert (list: (*LanguageList-German*), position: (6), value: ('Es ist an der Zeit, dass Krishna sein Schicksal erfüllt. Aber um Kansa zu erreichen, muss Krishna gegen Kansas Armee kämpfen.'));
          Insert (list: (*LanguageList-Japanese*), position: (1), value: ('昔々カンザという邪悪な王がいました。 彼はかつて神を崇拝するために人々を拷問していました。'));
          Insert (list: (*LanguageList-Japanese*), position: (2), value: ('予言は、ヴィシュヌ卿自身がカンザの姉の子として生まれ変わり、カンザの生涯を終わらせることであると言われています。'));
          Insert (list: (*LanguageList-Japanese*), position: (3), value: ('予言を聞いて、カンザは妹が彼がその誕生時に子供を殺すであろうと思って投獄した。'));
          Insert (list: (*LanguageList-Japanese*), position: (4), value: ('クリシュナが生まれると、奇跡的に刑務所内のすべての警備員が眠りに落ちたので、クリシュナは安全な場所に移動します。'));
          Insert (list: (*LanguageList-Japanese*), position: (5), value: ('クリシュナはカンザから隠された安全な家の中で育ちました。 数年後、クリシュナはカンザの宮殿に戻りました。'));
          Insert (list: (*LanguageList-Japanese*), position: (6), value: ('クリシュナが運命を果たすために時が来ました。 しかし、カンザに到達するためには、クリシュナはカンザの軍隊を通して戦わなければなりません。'));
          Insert (list: (*LanguageList-French*), position: (1), value: ('Il était une fois un roi diabolique nommé Kansa. Il avait l\'habitude de torturer son peuple pour vénérer des dieux.'));
          Insert (list: (*LanguageList-French*), position: (2), value: ('Une prophétie dit que Lord Vishnu lui-même se réincarnerait en enfant de la soeur de Kansa pour mettre fin à la vie de Kansa.'));
          Insert (list: (*LanguageList-French*), position: (3), value: ('En entendant la prophétie, Kansa emprisonne sa sœur en pensant qu\'il tuerait l\'enfant à sa naissance.'));
          Insert (list: (*LanguageList-French*), position: (4), value: ('Alors que Krishna est né, tous les gardes de la prison se sont endormis miraculeusement, Krishna est alors transféré dans un endroit sûr.'));
          Insert (list: (*LanguageList-French*), position: (5), value: ('Krishna est élevé à l\'abri de Kansa. Quelques années plus tard, le petit Krishna retourne au palais de Kansa.'));
          Insert (list: (*LanguageList-French*), position: (6), value: ('Le moment est venu pour Krishna d\'accomplir son destin. Mais pour atteindre Kansa, Krishna doit combattre l\'armée de Kansa.'));
          Insert (list: (*LanguageList-Bengali*), position: (1), value: ('একসময় কানসা নামে এক দুষ্ট রাজা ছিলেন। তিনি দেবতাদের উপাসনার জন্য লোকদের উপর অত্যাচার করতেন।'));
          Insert (list: (*LanguageList-Bengali*), position: (2), value: ('একটি ভবিষ্যদ্বাণীতে বলা হয়েছে যে কানসার জীবন শেষ করার জন্য ভগবান বিষ্ণু কানসার বোনের সন্তান হিসাবে পুনর্জন্ম লাভ করবেন।'));
          Insert (list: (*LanguageList-Bengali*), position: (3), value: ('ভবিষ্যদ্বাণী শুনে কানসা তার বোনকে বন্দী করে রাখে, এই আশায় যে সে জন্মের সময় বাচ্চাকে মেরে ফেলবে।'));
          Insert (list: (*LanguageList-Bengali*), position: (4), value: ('কৃষ্ণের জন্মের সাথে সাথে কারাগারের সমস্ত রক্ষীরা অলৌকিকভাবে ঘুমিয়ে পড়েছিলেন, এবং কৃষ্ণকে একটি নিরাপদ জায়গায় স্থানান্তরিত করা হয়েছিল।'));
          Insert (list: (*LanguageList-Bengali*), position: (5), value: ('কৃষ্ণা কানসা থেকে লুকিয়ে একটি নিরাপদ বাড়িতে বড় হয়েছেন। কয়েক বছর পরে, ছোট কৃষ্ণা কানসার প্রাসাদে ফিরে আসেন।'));
          Insert (list: (*LanguageList-Bengali*), position: (6), value: ('কৃষ্ণ তাঁর ভাগ্য পূর্ণ করার সময় এসেছে। তবে কানসার কাছে পৌঁছতে কৃষ্ণকে অবশ্যই কানজা সেনাবাহিনীর মধ্য দিয়ে লড়াই করতে হবে।'));
          Insert (list: (*LanguageList-Tamil*), position: (1), value: ('ஒரு காலத்தில் கன்சா என்ற தீய மன்னன் இருந்தான். தெய்வங்களை வணங்குவதற்காக மக்களை சித்திரவதை செய்வார்.'));
          Insert (list: (*LanguageList-Tamil*), position: (2), value: ('கன்சாவின் வாழ்க்கையை முடிவுக்குக் கொண்டுவருவதற்காக விஷ்ணுவே கன்சாவின் சகோதரியின் குழந்தையாக மறுபிறவி எடுப்பார் என்று ஒரு தீர்க்கதரிசனம் கூறப்படுகிறது.'));
          Insert (list: (*LanguageList-Tamil*), position: (3), value: ('தீர்க்கதரிசனத்தைக் கேட்டதும், கன்சா தனது சகோதரியை குழந்தையின் பிறப்பிலேயே கொன்றுவிடுவார் என்று நினைத்து சிறையில் அடைக்கிறார்.'));
          Insert (list: (*LanguageList-Tamil*), position: (4), value: ('கிருஷ்ணர் பிறந்தவுடன், சிறைச்சாலையில் இருந்த அனைத்து காவலர்களும் அதிசயமாக தூங்கிவிட்டதால், கிருஷ்ணர் பின்னர் பாதுகாப்பான இடத்திற்கு மாற்றப்படுகிறார்.'));
          Insert (list: (*LanguageList-Tamil*), position: (5), value: ('கிருஷ்ணர் கன்சாவிடமிருந்து மறைக்கப்பட்ட ஒரு பாதுகாப்பான வீட்டில் வளர்க்கப்படுகிறார். சில ஆண்டுகளுக்குப் பிறகு, சிறிய கிருஷ்ணர் கன்சாவின் அரண்மனைக்குத் திரும்புகிறார்.'));
          Insert (list: (*LanguageList-Tamil*), position: (6), value: ('கிருஷ்ணர் தனது விதியை நிறைவேற்ற வேண்டிய நேரம் வந்துவிட்டது. ஆனால் கன்சாவை அடைய கிருஷ்ணா கன்சா ராணுவம் மூலம் போராட வேண்டும்.'));
          Insert (list: (*LanguageList-Urdu*), position: (1), value: ('ایک زمانے میں ، کینسا نامی ایک شریر بادشاہ تھا۔ وہ دیوتاؤں کی پوجا کے لئے لوگوں کو اذیت دیتا تھا۔'));
          Insert (list: (*LanguageList-Urdu*), position: (2), value: ('ایک پیشن گوئی میں بتایا گیا ہے کہ بھگوان وشنو خود کنساس کی بہن کے بچے کی طرح کانسا کی زندگی کو ختم کرنے کے لئے دوبارہ جنم لیں گے۔'));
          Insert (list: (*LanguageList-Urdu*), position: (3), value: ('پیشن گوئی سنتے ہی ، کینسا نے اپنی بہن کو یہ سوچ کر قید کردیا کہ وہ اس کی پیدائش کے وقت ہی بچے کو مار ڈالے گی۔'));
          Insert (list: (*LanguageList-Urdu*), position: (4), value: ('جیسے ہی کرشنا پیدا ہوا ، معجزانہ طور پر جیل کے تمام محافظ سو گئے ، پھر کرشنا کو ایک محفوظ جگہ پر منتقل کردیا گیا۔'));
          Insert (list: (*LanguageList-Urdu*), position: (5), value: ('کرشنا کینسا سے پوشیدہ ایک محفوظ مکان میں پرورش پائی ہے۔ کچھ سال بعد ، چھوٹا کرشنا کنساس کے محل میں واپس آیا۔'));
          Insert (list: (*LanguageList-Urdu*), position: (6), value: ('اب وقت آگیا ہے کہ کرشنا اپنا مقدر پورا کریں۔ لیکن کانسا پہنچنے کے لئے ، کرشنا کو کانسا کی فوج کے ذریعے لڑنا پڑا۔'));
          Insert (list: (*LanguageList-Sindhi*), position: (1), value: ('هڪ دفعي جي ڳاله آهي، هڪ ڪنس نالي شيطان بادشاه هيو، جيڪو ڀڳوان جي عبادت ڪرڻ تي ماڻهن تي ظلم ڪندو هيو.'));
          Insert (list: (*LanguageList-Sindhi*), position: (2), value: ('هڪ آڪاش واڻي ٿي ته ڀڳوان وشنو ڪنس جي ڀيڻ جي پٽ جي شڪل ۾ پاڻ ٻيو جنم وٺندا ۽ ڪنس جو انت آڻيندا '));
          Insert (list: (*LanguageList-Sindhi*), position: (3), value: ('اها واڻي ٻڌي ڪنس پنهنجي ڀيڻ کي قيد ڪري چڏيو اهو سوڇي ته جئين هي ڀيڻ جو پٽ پيدا ٿيندو آئون ان کي قتل ڪري ڇڏيندس  '));
          Insert (list: (*LanguageList-Sindhi*), position: (4), value: ('جئين ئي ڪرشنا ڃائو، معجزي ۾ سڀ سپاهي سمهي رهيا ۽ ڪرشنا محفوظ جڳه تي منتقل ٿي ويو'));
          Insert (list: (*LanguageList-Sindhi*), position: (5), value: ('ڪرشنا جي پروريش هڪ ڪنس کان محفوط جڳه تي ٿي. ڪجه سالن کان پوء ڪرشنا ڪنس جي علائقي ۾ واپس آهيو'));
          Insert (list: (*LanguageList-Sindhi*), position: (6), value: ('وقت اچي ويو هيو ڪرشنا کي پنهنجو لڪش پورو ڪرڻ لاءِ پر ڪنس تائين پهچڻ لاءِ ڪرشنا کي ڪنس جي فوج سان جنگ ڪرڻي هئي'));
          Insert (list: (*LanguageList-Indonesian*), position: (1), value: ('Pada suatu hari, terdapat raja iblis bernama Kansa. Ia menyiksa orang untuk penyembahannya kepada dewa.'));
          Insert (list: (*LanguageList-Indonesian*), position: (2), value: ('Sebuah ramalan mengatakan bahwa dewa Wisnu sendiri akan bereinkarnasi sebagai anak dari saudara perempuan Kansa untuk mengakhiri kehidupan Kansa.'));
          Insert (list: (*LanguageList-Indonesian*), position: (3), value: ('Mendengar ramalan itu, Kansa memenjarakan saudara perempuannya agar ia dapat membunuh anak itu pada saat hari kelahirannya.'));
          Insert (list: (*LanguageList-Indonesian*), position: (4), value: ('Ketika Krishna lahir, secara ajaib semua penjaga penjara tertidur, lalu Krishna dipindahkan ke tempat yang aman.'));
          Insert (list: (*LanguageList-Indonesian*), position: (5), value: ('Krishna hidup di tempat yang aman, jauh dari Kansa. Beberapa tahun kemudian, Krishna kembali ke kediaman Kansa.'));
          Insert (list: (*LanguageList-Indonesian*), position: (6), value: ('Waktunya telah tiba untuk Krishna memenuhi takdirnya. Untuk melawan Kansa, Krishna harus melewati pasukan Kansa terlebih dahulu.'));
          Insert (list: (*LanguageList-Arabic*), position: (1), value: ('في قديم الزمان كان هناك ملك شرير يدعى كانسا. إعتاد تعذيب الناس لعبادة الألهة. '));
          Insert (list: (*LanguageList-Arabic*), position: (2), value: ('نبؤة تُخبر بأن اللورد فيشنو سوف يتجسد ثانية كطفل إخت كانسا لانهاء حياة كانسا.'));
          Insert (list: (*LanguageList-Arabic*), position: (3), value: ('عند سماع النبؤة, يسجن كانسا اخته معتقداً انه سيقتل الطفل عند ولادنه.'));
          Insert (list: (*LanguageList-Arabic*), position: (4), value: ('عند ولادة كريشنا, إعجوبة ما قد حدثت وجعلت جميع حراس السجن يناموا. تم نقل كريشنا بعدها لمكان أمن.'));
          Insert (list: (*LanguageList-Arabic*), position: (5), value: ('نشأ كريشنا في المكان الأمن. بعيداً عن أنظار كانسا. بعد بضع سنوات يعود كريشنا الصغير الى قصر كانسا.'));
          Insert (list: (*LanguageList-Arabic*), position: (6), value: ('لقد حان الوقت ليواجه كريشنا مصيره. لكن للوصول لكانسا, توجب على كانسا مقاتلة جيش كانسا.'));
          Insert (list: (*LanguageList-Chinese*), position: (1), value: ('从前有一个邪恶的国王，他的名字叫坎萨.他喜好折磨人们，用来祭神。'));
          Insert (list: (*LanguageList-Chinese*), position: (2), value: ('有一个预言说道，毗湿奴神将化身为坎萨妹妹的一个孩子，前来了结他的生命。'));
          Insert (list: (*LanguageList-Chinese*), position: (3), value: ('当听说了这个预言，坎萨把他的妹妹关了起来，准备在孩子降生的时候杀死这个孩子。'));
          Insert (list: (*LanguageList-Chinese*), position: (4), value: ('当克里希纳降生的时候，监狱里的所有守卫都鬼使神差地睡着了，于是克里希纳被转移到了一个安全的地方。'));
          Insert (list: (*LanguageList-Chinese*), position: (5), value: ('克里希纳在一个坎撒找不到的地方安全地成长。几年过后，小克里希纳悄悄回到了坎萨的皇宫。'));
          Insert (list: (*LanguageList-Chinese*), position: (6), value: ('克里希纳终于得到了实现自己命运的机会。不过要接近坎萨，克里希纳必须要战胜坎萨的所有军队。'));
          Insert (list: (*LanguageList-Russian*), position: (1), value: ('Однажды жил был злой король Канса. Он пытал людей за поклонение богам.'));
          Insert (list: (*LanguageList-Russian*), position: (2), value: ('Пророчество говорило, что сам Лорд Вишну перевоплотится ребёнком сестры Кансы, чтобы положить конец королю.'));
          Insert (list: (*LanguageList-Russian*), position: (3), value: ('Услышав пророчество, Канса бросил свою сестру в заточение, думая, что он убьёт ребёнка при рождении.'));
          Insert (list: (*LanguageList-Russian*), position: (4), value: ('Когда Кришна родился, чудесным образом, вся стража темницы заснула, а Кришна переместился в безопасное место.'));
          Insert (list: (*LanguageList-Russian*), position: (5), value: ('Кришна рос в безопасности, в доме, спрятанном от Кансы. Несколько лет спустя, маленький Кришна возвращается во дворец Кансы.'));
          Insert (list: (*LanguageList-Russian*), position: (6), value: ('Пришло время Кришне исполнить своё предназначение. Но чтобы дойти до Кансы, Кришне нужно победить армию Кансы.'));
          Insert (list: (*LanguageList-Polish*), position: (1), value: ('Dawno temu był sobie zły król o imieniu Kansa. Torturował ludzi za uwielbienie bogów.'));
          Insert (list: (*LanguageList-Polish*), position: (2), value: ('Proroctwo zostało powiedziane, że sam Pan Vishnu wcielał się w dziecko siostry Kansy, aby zakończyć życie Kansy.'));
          Insert (list: (*LanguageList-Polish*), position: (3), value: ('Po wysłuchaniu proroctwa Kansa więzi swoją siostrę myśląc, że zabije dziecko po jego narodzinach.'));
          Insert (list: (*LanguageList-Polish*), position: (4), value: ('Gdy Kriszna się rodzi, cudem wszyscy strażnicy w więzieniu zasnęli, Kriszna zostaje przeniesiona w bezpieczne miejsce.'));
          Insert (list: (*LanguageList-Polish*), position: (5), value: ('Krishna wychowuje się w bezpiecznym domu, ukrytym przed Kansa. Kilka lat później mała Kryszna wraca do Pałacu Kansy.'));
          Insert (list: (*LanguageList-Polish*), position: (6), value: ('Nadszedł czas, aby Kryszna wypełnił swoje przeznaczenie. Ale aby dotrzeć do Kansy, Kryszna musi walczyć przez armię Kansy.'));
          Insert (list: (*LanguageList-Spanish*), position: (1), value: ('Había una vez un rey malvado llamado Kansa. El solía torturar a las personas para adorar a dioses.'));
          Insert (list: (*LanguageList-Spanish*), position: (2), value: ('Una profecía contaba que el señor Vishnu reencarnaría como un niño de la hermana de Kansa para terminar con la vida de Kansa.'));
          Insert (list: (*LanguageList-Spanish*), position: (3), value: ('Al escuchar la profecía, Kansa apresó a su hermana pensando que así el podría matar a el niño el día en que naciera.'));
          Insert (list: (*LanguageList-Spanish*), position: (4), value: ('Cuando Krishna nace, milagrosamente los guardias en la prisión caen dormidos, entonces Krishna es llevado a un lugar seguro.'));
          Insert (list: (*LanguageList-Spanish*), position: (5), value: ('Krishna es criado en una casa segura, escondido de Kansa. Pocos años despues, el pequeño Krishna vuelve al palacio de Kansa.'));
          Insert (list: (*LanguageList-Spanish*), position: (6), value: ('El momento ha llegado para que Krishna cumpla su destino. Pero para llegar a Kansa, Krishna tiene que luchar contra el ejército de Kansa.'));
          Insert (list: (*LanguageList-Korean*), position: (1), value: ('옛날 옛적에 캔사라는 악한 왕이 있었다. 그는 신들을 숭배하도록 백성들을 고문하며 괴롭혔다.'));
          Insert (list: (*LanguageList-Korean*), position: (2), value: ('예언자가 말하길 비슈누 신이 캔사의 명을 끊기위해 캔사의 여동생의 아들로서 환생할 것이라는 말을 하였다.'));
          Insert (list: (*LanguageList-Korean*), position: (3), value: ('예언을 듣자, 캔사는 여동생을 감옥에 가두고 자식이 태어나면 죽일 생각을 하였다.'));
          Insert (list: (*LanguageList-Korean*), position: (4), value: ('크리슈나가 태어났을때 기적적으로 감옥의 경비원은 깊은 잠에 빠져들었고, 크리슈나는 안전한 장소로 옮겨졌다.'));
          Insert (list: (*LanguageList-Korean*), position: (5), value: ('크리슈나는 캔사가 찾지 못하는 안전한 장소에서 성장하였다. 몇년이 흐르자 어린 크리슈나는 캔사의 궁궐로 돌아기로 하였다.'));
          Insert (list: (*LanguageList-Korean*), position: (6), value: ('이제시간은  크리슈나가 그의 운명을 결정지을 때로 다가왔다. 그러나 캔사에게 다가가기 위해서는 크리슈나가 캔사의 군대와 싸워야만 했다.'));
          Insert (list: (*LanguageList-Turkish*), position: (1), value: ('Bir zamanlar Kansa adında kötü bir kral vardı. İnsanlara tanrılara tapmaları için işkence yapardı.'));
          Insert (list: (*LanguageList-Turkish*), position: (2), value: ('Lord Vishnu’nun, Kansa’nın hayatını sona erdirmek için Kansa’nın kız kardeşi olarak reenkarne olacağı söylenir.'));
          Insert (list: (*LanguageList-Turkish*), position: (3), value: ('Kehaniti duyunca,Kansa kardesini hapisilendiriyor ve kardesinin cocugunu dogmunda öldürmesini düsünüyor.'));
          Insert (list: (*LanguageList-Turkish*), position: (4), value: ('Krishna dunyaga geldiginde,  bir mucize gibi gardiyanlar uyumaya basliyorlar. Krishna güvenli bir yere götrüliyor.'));
          Insert (list: (*LanguageList-Turkish*), position: (5), value: ('Krishna güvenli bir yerde buyuyor. Birkac yil sonra kücük Krishna Kansanin sarayina geri dönüyor. '));
          Insert (list: (*LanguageList-Turkish*), position: (6), value: ('Krishna\'nın kaderini yerine getirme zamanı geldi.Ancak Kansa\'ya ulaşmak için,Krishna\'nın Kansa ordusu aracılığıyla savaşması gerekiyor.'));
          Insert (list: (*LanguageList-Vietnamese*), position: (1), value: ('Ngày xửa ngày xưa, có một vị vua độc ác tên là Kansa. Ông ấy thường hành hạ người dân như một hình thức để cúng tế các vị thần.'));
          Insert (list: (*LanguageList-Vietnamese*), position: (2), value: ('Một lời tiên tri bảo rằng Lãnh chúa Vishnu sẽ được đầu thai thành con trai của chị gái Kansa nhằm tiêu diệt hắn.'));
          Insert (list: (*LanguageList-Vietnamese*), position: (3), value: ('Khi nghe được lời tiên tri, Kansa đã bắt giam chị gái của hắn với suy nghĩ là sẽ giết chết đứa trẻ trong ngày nó ra đời.'));
          Insert (list: (*LanguageList-Vietnamese*), position: (4), value: ('Khi nghe được lời tiên tri, Kansa đã bắt giam chị gái của mình với suy nghĩ rằng hắn sẽ giết chết đứa trẻ trong ngày nó được sinh ra.'));
          Insert (list: (*LanguageList-Vietnamese*), position: (5), value: ('Krishna được bí mật nuôi nấng trong một ngôi nhà mà Kansa hề hay biết. Một vài năm sau đó, Krishna bé nhỏ quay lại lâu đài của Kansa.'));
          Insert (list: (*LanguageList-Vietnamese*), position: (6), value: ('Đây là thời gian để Krishna hoàn thành sứ mệnh của mình. Nhưng để tiếp cận Kansa, Krishna phải chiến đấu với quân lính của Kansa.'));
          Insert (list: (*LanguageList-Punjabi*), position: (1), value: ('ਇੱਕ ਵਾਰ ਕਨਸ ਨਾਮ ਦਾ ਇੱਕ ਦੁਸ਼ਟ ਰਾਜਾ ਸੀ. ਉਹ ਦੇਵਤਿਆਂ ਦੀ ਪੂਜਾ ਲਈ ਲੋਕਾਂ ਨੂੰ ਤਸੀਹੇ ਦਿੰਦਾ ਸੀ।'));
          Insert (list: (*LanguageList-Punjabi*), position: (2), value: ('ਇਕ ਭਵਿੱਖਬਾਣੀ ਵਿੱਚ ਦੱਸਿਆ ਗਿਆ ਹੈ ਕਿ ਭਗਵਾਨ ਵਿਸ਼ਨੂੰ ਖੁਦ ਕੰਮ ਦੀ ਜ਼ਿੰਦਗੀ ਨੂੰ ਖਤਮ ਕਰਨ ਲਈ ਕਂਸ ਦੀ ਭੈਣ ਦਾ ਪੁਨਰ ਜਨਮ ਲੈਣਗੇ.'));
          Insert (list: (*LanguageList-Punjabi*), position: (3), value: ('ਭਵਿੱਖਬਾਣੀ ਸੁਣਦਿਆਂ ਹੀ, ਕਂਸ ਆਪਣੀ ਭੈਣ ਨੂੰ ਇਹ ਸੋਚਦਿਆਂ ਕੈਦ ਕਰ ਦਿੰਦਾ ਹੈ ਕਿ ਉਹ ਇਸ ਜਨਮ ਵਿੱਚ ਬੱਚੇ ਨੂੰ ਮਾਰ ਦੇਵੇਗਾ.'));
          Insert (list: (*LanguageList-Punjabi*), position: (4), value: ('ਜਿਵੇਂ ਹੀ ਕ੍ਰਿਸ਼ਨ ਦਾ ਜਨਮ ਹੋਇਆ, ਇਕ ਚਮਤਕਾਰ ਨਾਲ ਜੇਲ੍ਹ ਦੇ ਸਾਰੇ ਪਹਿਰੇਦਾਰ ਸੌਂ ਗਏ ਅਤੇ ਕ੍ਰਿਸ਼ਨ ਨੂੰ ਫਿਰ ਇਕ ਸੁਰੱਖਿਅਤ ਜਗ੍ਹਾ ਤੇ ਲਿਆਂਦਾ ਗਿਆ.'));
          Insert (list: (*LanguageList-Punjabi*), position: (5), value: ('ਕ੍ਰਿਸ਼ਨ ਕਾਨਸ ਤੋਂ ਛੁਪਾ ਕੇ ਇੱਕ ਸੁਰੱਖਿਅਤ ਘਰ ਵਿੱਚ ਪਾਲਿਆ ਗਿਆ। ਕੁਝ ਸਾਲ ਬਾਅਦ, ਛੋਟਾ ਕ੍ਰਿਸ਼ਨਾ ਕੰਸ ਦੇ ਮਹਿਲ ਵਾਪਸ ਆਉਦਾ ਹੈ।'));
          Insert (list: (*LanguageList-Punjabi*), position: (6), value: ('ਸਮਾਂ ਆ ਜਾਂਦਾ ਹੈ ਕਿ ਕ੍ਰਿਸ਼ਨ ਆਪਣੀ ਕਿਸਮਤ ਨੂੰ ਪੂਰਾ ਕਰੇ। ਪਰ ਕਂਸ ਤਕ ਪਹੁੰਚਣ ਲਈ ਕ੍ਰਿਸ਼ਨ ਨੂੰ ਕਂਸ ਦੀ ਫ਼ੌਜ ਨਾਲ ਲੜਨਾ ਪਉਗਾ।'));
        }
      }
    }
  }
  Scene 'Settings' {
    Background {
      Looks {
        'setiingsback': 'setiingsback.png'
      }
    }
    Actor or object 'language' {
      Looks {
        'blue_button': 'blue_button_#0.png'
      }
      Locals {
        "displaytext",
        "savedlanguage"
      }
      Scripts {
        When condition becomes true (condition: ("savedlanguage" ≠ "Global-CurrentLanguage")) {
          Set (variable: ("savedlanguage"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList-Languages* )));
        }
        When scene starts {
          Set (size percentage: (100));
          Place at (x: (- 505), y: (60));
          Set (variable: ("displaytext"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList-Languages* )));
          Show (variable: ("displaytext"), x: (- 506), y: (80), size: (100), color: (#000000), alignment: (centered));
        }
      }
    }
    Actor or object 'English' {
      Looks {
        'blue_button': 'blue_button.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (- 127), y: (100));
          Set (variable: ("local-displaytext"), value: ('English'));
          Show (variable: ("local-displaytext"), x: (- 127), y: (110), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-EnglishLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Hindi' {
      Looks {
        'blue_button': 'blue_button_#1.png'
      }
      Locals {
        "Local-DisplayText"
      }
      Scripts {
        When scene starts {
          Place at (x: (- 127), y: (- 182));
          Set (variable: ("Local-DisplayText"), value: ('हिंदी'));
          Show (variable: ("Local-DisplayText"), x: (- 127), y: (- 172), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-HindiLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Portoguese' {
      Looks {
        'blue_button': 'blue_button_#3.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (204), y: (- 88));
          Set (variable: ("local-displaytext"), value: ('Português'));
          Show (variable: ("local-displaytext"), x: (204), y: (- 78), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-PortogueseLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Italian' {
      Looks {
        'blue_button': 'blue_button_#2.png'
      }
      Locals {
        "local-displaytexts"
      }
      Scripts {
        When scene starts {
          Place at (x: (204), y: (288));
          Set (variable: ("local-displaytexts"), value: ('Italiano'));
          Show (variable: ("local-displaytexts"), x: (204), y: (298), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-ItalianLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Sinhala' {
      Looks {
        'blue_button': 'blue_button_#4.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (533), y: (194));
          Set (variable: ("local-displaytext"), value: ('සිංහල'));
          Show (variable: ("local-displaytext"), x: (533), y: (204), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-SinhalaLanguage"));
          Wait (seconds: (0.2));
          Broadcast (message: ('Newlanguage'));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'German' {
      Looks {
        'blue_button': 'blue_button_#5.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (- 127), y: (- 88));
          Set (variable: ("local-displaytext"), value: ('Deutsch'));
          Show (variable: ("local-displaytext"), x: (- 127), y: (- 78), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-GermanLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Japanese' {
      Looks {
        'blue_button': 'blue_button_#6.png'
      }
      Locals {
        "Local-DisplayText"
      }
      Scripts {
        When scene starts {
          Place at (x: (204), y: (194));
          Set (variable: ("Local-DisplayText"), value: ('日本語'));
          Show (variable: ("Local-DisplayText"), x: (204), y: (204), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-JapaneseLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'French' {
      Looks {
        'blue_button': 'blue_button_#10.png'
      }
      Locals {
        "Local-DisplayText"
      }
      Scripts {
        When scene starts {
          Place at (x: (- 127), y: (6));
          Set (variable: ("Local-DisplayText"), value: ('français'));
          Show (variable: ("Local-DisplayText"), x: (- 127), y: (16), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-FrenchLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Bengali' {
      Looks {
        'blue_button': 'blue_button_#8.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (- 127), y: (194));
          Set (variable: ("local-displaytext"), value: ('বাংলা'));
          Show (variable: ("local-displaytext"), x: (- 127), y: (204), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-BengaliLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Tamil' {
      Looks {
        'blue_button': 'blue_button_#7.png'
      }
      Locals {
        "local-displaytexts"
      }
      Scripts {
        When scene starts {
          Place at (x: (533), y: (6));
          Set (variable: ("local-displaytexts"), value: ('தமிழ்'));
          Show (variable: ("local-displaytexts"), x: (533), y: (16), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-TamilLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Sindhi' {
      Looks {
        'blue_button': 'blue_button_#15.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (533), y: (288));
          Set (variable: ("local-displaytext"), value: ('سنڌي'));
          Show (variable: ("local-displaytext"), x: (533), y: (298), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-SindhiLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Urdu' {
      Looks {
        'blue_button': 'blue_button_#14.png'
      }
      Locals {
        "local-displaytexts"
      }
      Scripts {
        When scene starts {
          Place at (x: (533), y: (- 88));
          Set (variable: ("local-displaytexts"), value: ('اردو'));
          Show (variable: ("local-displaytexts"), x: (533), y: (- 78), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-UrduLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Indonesian' {
      Looks {
        'blue_button': 'blue_button_#17.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (531), y: (- 184));
          Set (variable: ("local-displaytext"), value: ('bahasa Indonesia'));
          Show (variable: ("local-displaytext"), x: (533), y: (- 172), size: (80), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-IndonesianLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Arabic' {
      Looks {
        'blue_button': 'blue_button_#13.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (- 127), y: (288));
          Set (variable: ("local-displaytext"), value: ('عربى'));
          Show (variable: ("local-displaytext"), x: (- 127), y: (298), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-ArabicLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Chinese' {
      Looks {
        'blue_button': 'blue_button_#18.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (- 127), y: (- 279));
          Set (variable: ("KrishnaX"), value: ('汉语'));
          Show (variable: ("KrishnaX"), x: (- 127), y: (- 267), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-ChineseLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Russian' {
      Looks {
        'blue_button': 'blue_button_#11.png'
      }
      Locals {
        "local-displaytexts"
      }
      Scripts {
        When scene starts {
          Place at (x: (204), y: (- 182));
          Set (variable: ("local-displaytexts"), value: ('русский'));
          Show (variable: ("local-displaytexts"), x: (204), y: (- 172), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-RussianLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Polish' {
      Looks {
        'blue_button': 'blue_button_#12.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (204), y: (6));
          Set (variable: ("local-displaytext"), value: ('Polskie'));
          Show (variable: ("local-displaytext"), x: (204), y: (16), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-PolishLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Spanish' {
      Looks {
        'blue_button': 'blue_button_#16.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (533), y: (100));
          Set (variable: ("local-displaytext"), value: ('Español'));
          Show (variable: ("local-displaytext"), x: (533), y: (110), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-SpanishLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Korean' {
      Looks {
        'blue_button': 'blue_button_#19.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (204), y: (- 283));
          Set (variable: ("local-displaytext"), value: ('한국어'));
          Show (variable: ("local-displaytext"), x: (204), y: (- 274), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-KoreanLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Turkish' {
      Looks {
        'blue_button': 'blue_button_#20.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (531), y: (- 281));
          Set (variable: ("local-displaytext"), value: ('Türkçe'));
          Show (variable: ("local-displaytext"), x: (531), y: (- 270), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-TurkishLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Vietnamese' {
      Looks {
        'blue_button': 'blue_button_#21.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (- 443), y: (- 279));
          Set (variable: ("local-displaytext"), value: ('tiếng Việt'));
          Show (variable: ("local-displaytext"), x: (- 443), y: (- 265), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-VietnameseLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Punjabi' {
      Looks {
        'blue_button': 'blue_button_#22.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (- 444), y: (- 183));
          Set (variable: ("local-displaytext"), value: ('ਪੰਜਾਬੀ'));
          Show (variable: ("local-displaytext"), x: (- 444), y: (- 170), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-PunjabiLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'Kannad' {
      Looks {
        'blue_button': 'blue_button_#9.png'
      }
      Locals {
        "local-displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (204), y: (100));
          Set (variable: ("local-displaytext"), value: ('ಕನ್ನಡ'));
          Show (variable: ("local-displaytext"), x: (204), y: (110), size: (100), color: (#000000), alignment: (centered));
        }
        When tapped {
          Set (size percentage: (70));
          Set (variable: ("Global-CurrentLanguage"), value: ("Const-KannadaLanguage"));
          Broadcast (message: ('Newlanguage'));
          Wait (seconds: (0.2));
          Set (size percentage: (100));
        }
      }
    }
    Actor or object 'correct' {
      Looks {
        'correct': '2019_07_04_041732.png'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (50));
        }
        When scene starts {
          Forever {
            If (condition: ("Global-CurrentLanguage" = "Const-EnglishLanguage")) {
              Place at (x: (- 281), y: (98));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-HindiLanguage")) {
              Place at (x: (- 256), y: (- 184));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-ItalianLanguage")) {
              Place at (x: (68), y: (288));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-PortogueseLanguage")) {
              Place at (x: (60), y: (- 89));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-SinhalaLanguage")) {
              Place at (x: (395), y: (195));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-GermanLanguage")) {
              Place at (x: (- 278), y: (- 89));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-JapaneseLanguage")) {
              Place at (x: (66), y: (195));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-FrenchLanguage")) {
              Place at (x: (- 277), y: (7));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-BengaliLanguage")) {
              Place at (x: (- 280), y: (192));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-TamilLanguage")) {
              Place at (x: (397), y: (5));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-KannadaLanguage")) {
              Place at (x: (66), y: (99));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-UrduLanguage")) {
              Place at (x: (395), y: (- 89));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-SindhiLanguage")) {
              Place at (x: (402), y: (287));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-IndonesianLanguage")) {
              Place at (x: (395), y: (- 187));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-ArabicLanguage")) {
              Place at (x: (- 273), y: (288));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-ChineseLanguage")) {
              Place at (x: (- 253), y: (- 281));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-RussianLanguage")) {
              Place at (x: (68), y: (- 183));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-PolishLanguage")) {
              Place at (x: (72), y: (5));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-SpanishLanguage")) {
              Place at (x: (400), y: (101));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-KoreanLanguage")) {
              Place at (x: (68), y: (- 284));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-TurkishLanguage")) {
              Place at (x: (399), y: (- 283));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-VietnameseLanguage")) {
              Place at (x: (- 587), y: (- 281));
            }
            If (condition: ("Global-CurrentLanguage" = "Const-PunjabiLanguage")) {
              Place at (x: (- 583), y: (- 184));
            }
          }
        }
      }
    }
    Actor or object 'home' {
      Looks {
        'home': 'home_#1.png'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (50));
          Place at (x: (- 636), y: (288));
        }
        When tapped {
          Set (size percentage: (60));
          Wait (seconds: (0.1));
          Start (scene: ('Main Menu'));
        }
      }
    }
  }
  Scene 'Introduction' {
    Background {
      Looks {
        '1': '1.png',
        '2': '2.png',
        '3': '3.png',
        '4': '4.png',
        '5': '5.png',
        '6': '6.png',
        'Background': 'Background.png'
      }
      Sounds {
        'scene1': 'scene1'
      }
      Scripts {
        When scene starts {
          Set background to (look: ('Background'));
          Set (size percentage: (90));
          Forever {
            Start sound and wait (sound: ('scene1'));
          }
        }
        When you receive (message: ('nextcaption')) {
          Next look;
          Set (size percentage: (90));
        }
      }
    }
    Actor or object 'Caption' {
      Looks {
        'Caption': 'My actor or object.png'
      }
      Scripts {
        When scene starts {
          Set (variable: ("currentcaption"), value: (0));
        }
        When you receive (message: ('nextcaption')) {
          Change (variable: ("currentcaption"), value: (1));
          If (condition: ("currentcaption" = 7)) {
            Start (scene: ('Scene 1'));
          }
          If (condition: ("Global-CurrentLanguage" = "Const-EnglishLanguage")) {
            Set (variable: ("caption"), value: (item( "currentcaption" , *Language List-Caption* )));
            Show (variable: ("caption"), x: (0), y: (350), size: (50), color: ('#FF0000'), alignment: (centered));
          }
          If (condition: ("Global-CurrentLanguage" = "Const-PortogueseLanguage")) {
            Set (variable: ("movement speed"), value: (item( "currentcaption" , *LanguageList-Portuguese* )));
            Show (variable: ("caption"), x: (0), y: (350), size: (50), color: ('#FF0000'), alignment: (centered));
          }
          If (condition: ("Global-CurrentLanguage" = "Const-ItalianLanguage")) {
            Set (variable: ("caption"), value: (item( "currentcaption" , *LanguageList-Italian* )));
            Show (variable: ("caption"), x: (0), y: (350), size: (50), color: ('#FF0000'), alignment: (centered));
          }
          If (condition: ("Global-CurrentLanguage" = "Const-HindiLanguage")) {
            Set (variable: ("caption"), value: (item( "currentcaption" , *LanguageList-Hindi* )));
            Show (variable: ("caption"), x: (0), y: (350), size: (50), color: ('#FF0000'), alignment: (centered));
          }
          If (condition: ("Global-CurrentLanguage" = "Const-GermanLanguage")) {
            Set (variable: ("caption"), value: (item( "currentcaption" , *LanguageList-German* )));
            Show (variable: ("caption"), x: (0), y: (350), size: (50), color: ('#FF0000'), alignment: (centered));
          }
          If (condition: ("Global-CurrentLanguage" = "Const-JapaneseLanguage")) {
            Set (variable: ("caption"), value: (item( "currentcaption" , *LanguageList-Japanese* )));
            Show (variable: ("caption"), x: (0), y: (350), size: (50), color: ('#FF0000'), alignment: (centered));
          }
          If (condition: ("Global-CurrentLanguage" = "Const-FrenchLanguage")) {
            Set (variable: ("caption"), value: (item( "currentcaption" , *LanguageList-French* )));
            Show (variable: ("caption"), x: (0), y: (350), size: (50), color: ('#FF0000'), alignment: (centered));
          }
        }
      }
    }
    Actor or object 'skip' {
      Looks {
        'skip': 'skip.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (585), y: (- 260));
          Broadcast (message: ('nextcaption'));
        }
        When tapped {
          Broadcast (message: ('nextcaption'));
        }
      }
    }
    Actor or object 'Scene skip' {
      Looks {
        'skip': 'skip_#0.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (- 611), y: (- 260));
        }
        When tapped {
          Start (scene: ('Scene 1'));
        }
      }
    }
  }
  Scene 'Entry' {
    Background {
      Looks {
        '2019_07_14_125650': '2019_07_14_125650.png',
        '2019_07_31_110158': '2019_07_31_110158.png'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (67));
        }
        When scene starts {
          If (condition: ("Current Scene" = 2)) {
            Next look;
          } else {
          }
        }
      }
    }
    Actor or object 'Krishna' {
      Looks {
        '11': '2019_07_14_011921.png',
        '12': '2019_07_14_011926.png'
      }
      Scripts {
        When scene starts {
          Set (variable: ("KrishnamoveY"), value: (- 300));
          Set (variable: ("movement speed"), value: (13));
          Place at (x: (0), y: (- 260));
          Show;
          Repeat (times: (20)) {
            Next look;
            Wait (seconds: (0.1));
            Change y by (value: ("movement speed"));
          }
          Wait (seconds: (0.2));
          Start (scene: ('Scene 1'));
        }
      }
    }
    Actor or object 'Door' {
      Looks {
        'Door': '2019_07_19_092931.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (0), y: (- 330));
        }
      }
    }
  }
  Scene 'Scene 1' {
    Background {
      Looks {
        'Basementr': 'Basementr.png',
        'Graveyard': '2019_07_31_110158.png'
      }
      Sounds {
        'bacckground 2 (1)': 'bacckground 2_#0.mp3'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (67));
          Start (sound: ('bacckground 2 (1)'));
          Read from device (variable: ("Picked Coins"));
        }
        When scene starts {
          Set (variable: ("Total Number of Enemies"), value: (0));
          Wait (seconds: (5));
          Wait until (condition: ("Total Number of Enemies" < 1));
          Broadcast (message: ('openDoor'));
        }
        When you receive (message: ('Change Assets For Graveyard')) {
          Set (variable: ("Total Number of Enemies"), value: (0));
          Next look;
        }
        When you receive (message: ('Start tutorial')) {
          Wait (seconds: (1));
          Broadcast (message: ('openDoor'));
        }
      }
    }
    Actor or object 'Krishna' {
      Looks {
        '1': '2019_06_01_101337.png',
        '2': '2019_06_01_101342.png',
        '5': 'i1.png',
        '6': 'i2.png',
        '9': 'frontkrishnas1.png',
        '10': 'frontkrishnas2.png',
        '11': 'backkrishnas1.png',
        '12': '2019_06_18_091113.png'
      }
      Sounds {
        'Krishna-hurt': 'Krishna-hurt'
      }
      Locals {
        "time1",
        "time2",
        "Local: agility factor",
        "Local: finger index",
        "Local: joystick finger index",
        "Local: last joystick x",
        "Local: last joystick y",
        "Local: joystick x",
        "Local: joystick y",
        "Local: velocity x",
        "Local: velocity y",
        "Local: speed threshold squared",
        "Local: deceleration factor",
        "Local: deceleration countdown",
        "Local: delta time for velocity calculation",
        "Local: look offset",
        "Local: arrows' finger index",
        "Local: arrow joystick x",
        "Local: arrow joystick y",
        "Local: last arrow joystick x",
        "Local: last arrow joystick y",
        "Local: Krishna's speed limit squared",
        "Local: Krishna's speed squared",
        "Local: normal agility factor",
        "Local: speed-up agility factor",
        "Local: unchanged direction tolerance",
        "Local: time between arrows",
        "Local: arrow joystick direction reset  distance threshold squared",
        "Local: delta time for arrow direction calculation",
        "Local: series' arrow start x",
        "Local: series' arrow start y"
      }
      Scripts {
        When scene starts {
          Set (variable: ("Local: arrow joystick direction reset  distance threshold squared"), value: (power( 20 , 2 )));
          Set (variable: ("Local: time between arrows"), value: (0.3));
          Set (variable: ("Local: delta time for arrow direction calculation"), value: (0.05));
          Set (variable: ("Local: Krishna's speed limit squared"), value: (power( 600 , 2 )));
          Set (variable: ("Local: speed threshold squared"), value: (power( 120 , 2 )));
          Set (variable: ("Local: unchanged direction tolerance"), value: (15));
          Set (variable: ("Local: deceleration factor"), value: (0.85));
          Set (variable: ("Local: delta time for velocity calculation"), value: (0.05));
          Set (variable: ("KrishnaX"), value: (0));
          Set (variable: ("KrishnaY"), value: (1));
          Set (variable: ("time1"), value: (0.1));
          Set (variable: ("time2"), value: (0.2));
          Set (variable: ("Local: normal agility factor"), value: (5));
          Set (variable: ("Local: speed-up agility factor"), value: (7.5));
          Set (variable: ("Local: agility factor"), value: ("Local: normal agility factor"));
          Set (variable: ("KrishnaProtected"), value: (0));
          Set gravity for all actors and objects to (x steps/second²: (0), y steps/second²: (0));
          Set (motion type: (moving and bouncing under gravity));
          Come to front;
        }
        When you receive (message: ('Bounce off behindRock from below!')) {
          Change y by (value: (- 50));
          Change x by (value: (( 2 × random value from to( 0 , 1 ) - 1 ) × 50));
          Point in direction (degrees: (90));
        }
        When you receive (message: ('Keep shooting!')) {
          Repeat until (condition: (! stage is touched( "Local: arrows' finger index" ))) {
            Wait (seconds: ("Local: time between arrows"));
            Create clone of (actor or object: ('Arrow'));
          }
        }
        When you receive (message: ('Start arrows\' joystick control!')) {
          Set (variable: ("Local: arrow joystick x"), value: (stage touch x( "Local: arrows' finger index" )));
          Set (variable: ("Local: arrow joystick y"), value: (stage touch y( "Local: arrows' finger index" )));
          Wait (seconds: ("Local: delta time for arrow direction calculation"));
          Set (variable: ("Local: last arrow joystick x"), value: (stage touch x( "Local: arrows' finger index" )));
          Set (variable: ("Local: last arrow joystick y"), value: (stage touch y( "Local: arrows' finger index" )));
          If (condition: ("Local: arrow joystick x" = "Local: last arrow joystick x" && "Local: arrow joystick y" = "Local: last arrow joystick y")) {
            If (condition: (x velocity ≠ 0 || y velocity ≠ 0)) {
              Set (variable: ("Direction of shooting"), value: (arctangent2( x velocity , y velocity )));
            }
          } else {
            Set (variable: ("Direction of shooting"), value: (arctangent2( "Local: last arrow joystick x" - "Local: arrow joystick x" , "Local: last arrow joystick y" - "Local: arrow joystick y" )));
          }
          Create clone of (actor or object: ('Arrow'));
          Broadcast (message: ('Keep shooting!'));
          Set (variable: ("Local: series' arrow start x"), value: ("Local: arrow joystick x"));
          Set (variable: ("Local: series' arrow start y"), value: ("Local: arrow joystick y"));
          Wait (seconds: ("Local: delta time for arrow direction calculation"));
          Repeat until (condition: (! stage is touched( "Local: arrows' finger index" ))) {
            Set (variable: ("Local: arrow joystick x"), value: (stage touch x( "Local: arrows' finger index" )));
            Set (variable: ("Local: arrow joystick y"), value: (stage touch y( "Local: arrows' finger index" )));
            If (condition: (power( "Local: arrow joystick x" - "Local: last arrow joystick x" , 2 ) + power( "Local: arrow joystick y" - "Local: last arrow joystick y" , 2 ) > "Local: arrow joystick direction reset  distance threshold squared")) {
              Set (variable: ("Direction of shooting"), value: (arctangent2( "Local: last arrow joystick x" - "Local: arrow joystick x" , "Local: last arrow joystick y" - "Local: arrow joystick y" )));
              Set (variable: ("Local: series' arrow start x"), value: ("Local: last arrow joystick x"));
              Set (variable: ("Local: series' arrow start y"), value: ("Local: last arrow joystick y"));
              Change volume by (value: (0));
            } else {
              Set (variable: ("Direction of shooting"), value: (arctangent2( "Local: arrow joystick x" - "Local: series' arrow start x" , "Local: arrow joystick y" - "Local: series' arrow start y" )));
            }
            Wait (seconds: ("Local: delta time for arrow direction calculation"));
            Set (variable: ("Local: last arrow joystick x"), value: ("Local: arrow joystick x"));
            Set (variable: ("Local: last arrow joystick y"), value: ("Local: arrow joystick y"));
          }
        }
        When you receive (message: ('Start Krishna\'s joystick control!')) {
          Set (variable: ("Local: joystick x"), value: (stage touch x( "Local: joystick finger index" )));
          Set (variable: ("Local: joystick y"), value: (stage touch y( "Local: joystick finger index" )));
          Broadcast (message: ('Krishna: move!'));
          Broadcast (message: ('Krishna: animate look!'));
          Repeat until (condition: (! stage is touched( "Local: joystick finger index" ))) {
            Set (variable: ("Local: last joystick x"), value: (stage touch x( "Local: joystick finger index" )));
            Set (variable: ("Local: last joystick y"), value: (stage touch y( "Local: joystick finger index" )));
            Wait (seconds: ("Local: delta time for velocity calculation"));
            Set (variable: ("Local: joystick x"), value: ("Local: last joystick x"));
            Set (variable: ("Local: joystick y"), value: ("Local: last joystick y"));
            Set (variable: ("Krishna's motion direction"), value: (arctangent2( x velocity , y velocity )));
          }
        }
        When stage is tapped {
          Set (variable: ("Local: finger index"), value: (last stage touch index));
          If (condition: (stage touch x( "Local: finger index" ) < 200)) {
            If (condition: (! stage is touched( "Local: joystick finger index" ))) {
              Set (variable: ("Local: joystick finger index"), value: ("Local: finger index"));
              Broadcast (message: ('Start Krishna\'s joystick control!'));
            }
          } else {
            If (condition: (! stage is touched( "Local: arrows' finger index" ))) {
              Set (variable: ("Local: arrows' finger index"), value: ("Local: finger index"));
              Broadcast (message: ('Start arrows\' joystick control!'));
            }
          }
        }
        When you receive (message: ('Krishna: move!')) {
          Set (variable: ("Local: velocity x"), value: (( stage touch x( "Local: joystick finger index" ) - "Local: joystick x" ) × "Local: agility factor"));
          Set (variable: ("Local: velocity y"), value: (( stage touch y( "Local: joystick finger index" ) - "Local: joystick y" ) × "Local: agility factor"));
          Set (variable: ("KrishnaX"), value: (position x));
          Set (variable: ("KrishnaY"), value: (position y));
          Set (variable: ("Local: Krishna's speed squared"), value: (power( "Local: velocity x" , 2 ) + power( "Local: velocity y" , 2 )));
          If (condition: ("Local: Krishna's speed squared" > power( x velocity , 2 ) + power( y velocity , 2 ) || "Local: Krishna's speed squared" > "Local: speed threshold squared" && absolute value( modulo( arctangent2( "Local: velocity y" , "Local: velocity x" ) - arctangent2( y velocity , x velocity ) + 180 , 360 ) - 180 ) > "Local: unchanged direction tolerance")) {
            If (condition: ("Local: Krishna's speed squared" > "Local: Krishna's speed limit squared")) {
              Set (variable: ("Local: velocity x"), value: ("Local: velocity x" × square root( "Local: Krishna's speed limit squared" ÷ "Local: Krishna's speed squared" )));
              Set (variable: ("Local: velocity y"), value: ("Local: velocity y" × square root( "Local: Krishna's speed limit squared" ÷ "Local: Krishna's speed squared" )));
            }
            Set velocity to (x steps/second: ("Local: velocity x" × "Local: agility factor" ÷ "Local: normal agility factor"), y steps/second: ("Local: velocity y" × "Local: agility factor" ÷ "Local: normal agility factor"));
          }
          If (condition: (stage is touched( "Local: joystick finger index" ))) {
            Broadcast (message: ('Krishna: move!'));
          } else {
            Set (variable: ("Local: deceleration countdown"), value: (100));
            Repeat until (condition: ("Local: deceleration countdown" = 0 || round( x velocity ) = 0 && round( y velocity ) = 0)) {
              Set velocity to (x steps/second: (x velocity × "Local: deceleration factor"), y steps/second: (y velocity × "Local: deceleration factor"));
              Change (variable: ("Local: deceleration countdown"), value: (- 1));
            }
            Set velocity to (x steps/second: (0), y steps/second: (0));
          }
        }
        When you bounce off (actor or object: (any edge, actor, or object)) {
          Set velocity to (x steps/second: (x velocity × 0.5), y steps/second: (y velocity × 0.5));
          Repeat until (condition: (angular velocity = 0 && null = 90)) {
            Spin (direction: (left), degrees/second: (0));
            Point in direction (degrees: (90));
          }
        }
        When you receive (message: ('Krishna: animate look!')) {
          Repeat until (condition: (! stage is touched( "Local: joystick finger index" ))) {
            Set (variable: ("Local: look offset"), value: (modulo( "Local: look offset" + 1 , 2 )));
            If (condition: (absolute value( "Krishna's motion direction" ) ≤ 45)) {
              Switch to (look by number: (7 + "Local: look offset"));
            } else {
              If (condition: (absolute value( "Krishna's motion direction" ) ≥ 135)) {
                Switch to (look by number: (5 + "Local: look offset"));
              } else {
                If (condition: ("Krishna's motion direction" > 45)) {
                  Switch to (look by number: (1 + "Local: look offset"));
                } else {
                  Switch to (look by number: (3 + "Local: look offset"));
                }
              }
            }
            Point in direction (degrees: (90));
            Wait (seconds: ("time1"));
          }
        }
        When you receive (message: ('Show krishna')) {
          Show;
        }
        When you receive (message: ('Hide krishna')) {
          Hide;
        }
        When you receive (message: ('used invulnerability potion')) {
          Set (color: (150));
          Set (variable: ("KrishnaProtected"), value: (1));
        }
        When you receive (message: ('invulnerability potion finished')) {
          Set (variable: ("KrishnaProtected"), value: (0));
        }
        When you receive (message: ('used health potion')) {
          Set (color: (150));
        }
        When you receive (message: ('agility potion finished')) {
          Set (variable: ("Local: agility factor"), value: ("Local: normal agility factor"));
        }
        When you receive (message: ('used agility potion')) {
          Set (variable: ("Local: agility factor"), value: ("Local: speed-up agility factor"));
          Set (color: (50));
        }
        When you receive (message: ('reset status')) {
          Clear graphic effects;
        }
        When you receive (message: ('Krishna is hurt')) {
          Start (sound: ('Krishna-hurt'));
          Repeat (times: (3)) {
            Wait (seconds: (0.2));
            Set (transparency percentage: (80));
            Wait (seconds: (0.2));
            Set (transparency percentage: (0));
          }
        }
      }
    }
    Actor or object 'door' {
      Looks {
        'door1': 'door1.png',
        'door2': 'door2.png',
        'door3': 'door3.png',
        'door4': 'door4.png'
      }
      Sounds {
        'door': 'door'
      }
      Scripts {
        When scene starts {
          Set (variable: ("DoorWaitTime"), value: (0.3));
          Set (variable: ("DoorLockedStatus"), value: ('Locked'));
          Place at (x: (- 5), y: (330));
        }
        When you receive (message: ('openDoor')) {
          Start (sound: ('door'));
          Set (variable: ("DoorLockedStatus"), value: ('Unlocked'));
          Switch to (look: ('door1'));
          Wait (seconds: ("DoorWaitTime"));
          Switch to (look: ('door2'));
          Wait (seconds: ("DoorWaitTime"));
          Switch to (look: ('door3'));
          Wait (seconds: ("DoorWaitTime"));
          Switch to (look: ('door4'));
        }
        When scene starts {
          Wait (seconds: (1));
          Forever {
            If (condition: (touches actor or object(Krishna))) {
              If (condition: ("DoorLockedStatus" = 'Unlocked')) {
                Write on device (variable: ("Actual number of bombs"));
                Write on device (variable: ("actual number of agility potions"));
                Write on device (variable: ("actual number of invulnerability potions"));
                Write on device (variable: ("global-actualnumberofHealthPotions"));
                Broadcast (message: ('Changescene'));
                Wait (seconds: (1));
                If (condition: ("Is tutorial")) {
                  Change (variable: ("Wave Number"), value: (1));
                  Start (scene: ('Scene 1'));
                } else {
                  Start (scene: ('Shop'));
                }
              }
            }
          }
        }
      }
    }
    Actor or object 'Single Health' {
      Looks {
        'Empty': '28px-HUD_heart_red_empty.png',
        'Half': '28px-HUD_heart_red_half.png',
        'Full': '28px-HUD_heart_red_full.png'
      }
      Locals {
        "MyHealthInstance",
        "Local-Posx",
        "Local-posy"
      }
      Scripts {
        When scene starts {
          Hide;
        }
        When you start as a clone {
          Switch to (look: ('Full'));
          Set (variable: ("MyHealthInstance"), value: ("HealthCreatorHelper"));
          Set (variable: ("Local-Posx"), value: (- 700 + ( "MyHealthInstance" × 30 )));
          Set (variable: ("Local-posy"), value: (330));
          Place at (x: ("Local-Posx"), y: ("Local-posy"));
          Wait (seconds: (0.2));
          Show;
        }
        When condition becomes true (condition: ("CurrentHealthPoints" ≤ ( "MyHealthInstance" - 1 ))) {
          Switch to (look: ('Empty'));
          Glide to (x: ("Local-Posx" + random value from to( - 10 , 10 )), y: ("Local-posy" + random value from to( - 10 , 10 )), seconds: (0.1));
          Glide to (x: ("Local-Posx"), y: ("Local-posy"), seconds: (0.1));
        }
        When condition becomes true (condition: ("CurrentHealthPoints" ≥ "MyHealthInstance")) {
          Switch to (look: ('Full'));
          Glide to (x: ("Local-Posx" + random value from to( - 10 , 10 )), y: ("Local-posy" + random value from to( - 10 , 10 )), seconds: (0.1));
          Glide to (x: ("Local-Posx"), y: ("Local-posy"), seconds: (0.1));
        }
        When condition becomes true (condition: ("MaxHealthPoints" < "MyHealthInstance")) {
          Delete this clone;
        }
        When condition becomes true (condition: ("CurrentHealthPoints" = ( "MyHealthInstance" - 0.5 ))) {
          Switch to (look: ('Half'));
          Glide to (x: ("Local-Posx" + random value from to( - 10 , 10 )), y: ("Local-posy" + random value from to( - 10 , 10 )), seconds: (0.1));
          Glide to (x: ("Local-Posx"), y: ("Local-posy"), seconds: (0.1));
        }
      }
    }
    Actor or object 'Health controller' {
      Looks {
        'My actor or object (1)': 'My actor or object_#2.png'
      }
      Locals {
        "local-firsttime"
      }
      Scripts {
        When scene starts {
          If (condition: ("global-firststarthealth" = 0)) {
            Wait (seconds: (0.1));
            Set (variable: ("MaxHealthPoints"), value: (5));
            Set (variable: ("CurrentHealthPoints"), value: (1));
            Set (variable: ("CurrentHealthPoints"), value: ("MaxHealthPoints"));
            Set (variable: ("global-firststarthealth"), value: (1));
          }
          Set (variable: ("HealthCreatorHelper"), value: (0));
          Repeat (times: ("MaxHealthPoints")) {
            Create clone of (actor or object: ('Single Health'));
            Change (variable: ("HealthCreatorHelper"), value: (1));
          }
        }
        When you receive (message: ('HC:Add half a health!')) {
          Change (variable: ("CurrentHealthPoints"), value: (0.5));
          If (condition: ("CurrentHealthPoints" > "MaxHealthPoints")) {
            Set (variable: ("CurrentHealthPoints"), value: ("MaxHealthPoints"));
          }
        }
        When you receive (message: ('HC:Remove half a health')) {
          Change (variable: ("CurrentHealthPoints"), value: (- 0.5));
          If (condition: ("CurrentHealthPoints" < 0)) {
            Set (variable: ("CurrentHealthPoints"), value: (0));
            Start (scene: ('GameOver'));
          }
        }
        When you receive (message: ('HC:Add a max health!')) {
          Change (variable: ("MaxHealthPoints"), value: (1));
          Change (variable: ("CurrentHealthPoints"), value: (1));
          Set (variable: ("HealthCreatorHelper"), value: ("MaxHealthPoints"));
          Create clone of (actor or object: ('Single Health'));
        }
        When you receive (message: ('HC:Remove a max health!')) {
          Change (variable: ("MaxHealthPoints"), value: (- 1));
          If (condition: ("MaxHealthPoints")) {
            Set (variable: ("MaxHealthPoints"), value: (1));
          }
          If (condition: ("MaxHealthPoints" < "CurrentHealthPoints")) {
            Set (variable: ("CurrentHealthPoints"), value: ("MaxHealthPoints"));
          }
        }
      }
    }
    Actor or object 'Arrow' {
      Looks {
        'Arrow': 'arrowright_#0.png'
      }
      Sounds {
        '205938__twisted-euphoria__arrow-impact': '205938__twisted-euphoria__arrow-impact.wav'
      }
      Locals {
        "Local: repeat shoot delay",
        "Local: last finger index",
        "Local: arrow joystick finger index",
        "Local: arrow velocity"
      }
      Scripts {
        When scene starts {
          Hide;
          Set (size percentage: (60));
          Set (variable: ("Local: arrow velocity"), value: (800));
          Set (variable: ("Local: repeat shoot delay"), value: (0.4));
        }
        When you start as a clone {
          Point in direction (degrees: ("Direction of shooting"));
          Go to (target: ('Krishna'));
          Show;
          Set velocity to (x steps/second: (sine( null ) × "Local: arrow velocity"), y steps/second: (cosine( null ) × "Local: arrow velocity"));
          Repeat until (condition: (absolute value( position x ) > 800 || absolute value( position y ) > 400)) {
            If (condition: (touches actor or object(firedemon1))) {
              Broadcast (message: ('Fire demon hit'));
              Delete this clone;
            }
            If (condition: (touches actor or object(putna))) {
              Broadcast (message: ('putna hit'));
              Delete this clone;
            }
            If (condition: (touches actor or object(putna shield) || touches actor or object(Rock instance))) {
              Delete this clone;
            }
          }
          Delete this clone;
        }
      }
    }
    Actor or object 'Rock instance' {
      Looks {
        'Rock instance': 'Rocks.png',
        '4': '4_#1.png',
        '3': '3_#1.png',
        '0': '0_#1.png',
        '2': '2.png',
        '1': '1_#1.png',
        'Grave': '2019_08_03_041629.png'
      }
      Sounds {
        'Blastwave_FX_GrenadeExplosion_S08WA.229_229': 'Blastwave_FX_GrenadeExplosion_S08WA.229_229.wav'
      }
      Locals {
        "Bomb wait time",
        "local-position"
      }
      Scripts {
        When scene starts {
          Set (variable: ("Bomb wait time"), value: (0.1));
          Hide;
        }
        When you receive (message: ('despawn all rocks')) {
          Delete this clone;
        }
        When you receive (message: ('Change Assets For Graveyard')) {
          Set (size percentage: (65));
          Switch to (look by number: (7));
        }
        When you start as a clone {
          Place at (x: (( "Global-RockSpawnX" × 145 ) - 650), y: (( "Global-RockSpawnY" × 155 ) - 250));
          Go back (number of layers: (100));
          Show;
        }
        When you start as a clone {
          Forever {
            If (condition: (touches actor or object(bomb))) {
              Switch to (look by number: (2));
              Start (sound: ('Blastwave_FX_GrenadeExplosion_S08WA.229_229'));
              Set (size percentage: (200));
              Wait (seconds: ("Bomb wait time"));
              Switch to (look by number: (3));
              Wait (seconds: ("Bomb wait time"));
              Switch to (look by number: (4));
              Wait (seconds: ("Bomb wait time"));
              Switch to (look by number: (5));
              Wait (seconds: ("Bomb wait time"));
              Switch to (look by number: (6));
              Wait (seconds: ("Bomb wait time"));
              Set (variable: ("Global-ItemspawnX"), value: (position x));
              Set (variable: ("Global-ItemspawnY"), value: (position y));
              Broadcast (message: ('Spawn Items From Rocks'));
              Delete this clone;
            }
          }
        }
        When you start as a clone {
          Forever {
            If (condition: (( "KrishnaY" > position y ))) {
              Set (variable: ("local-position"), value: (1));
              Come to front;
            } else {
              If (condition: ("local-position")) {
                Go back (number of layers: (50));
              }
              Set (variable: ("local-position"), value: (0));
            }
          }
        }
      }
    }
    Actor or object 'behind rock' {
      Looks {
        'Rock instance': 'Rocks_#0.png'
      }
      Locals {
        "Local: is bouncing"
      }
      Scripts {
        When scene starts {
          Hide;
          Set (transparency percentage: (99));
          Set (size percentage: (150));
          Set (variable: ("Bomb wait time"), value: (0.1));
          Set (motion type: (moving and bouncing under gravity));
        }
        When you start as a clone {
          Place at (x: (( "Global-RockSpawnX" × 145 ) - 650), y: (( "Global-RockSpawnY" × 155 ) - 250));
          Go back (number of layers: (101));
          Show;
        }
        When you start as a clone {
          Wait (seconds: (0.1));
          Forever {
            If (condition: (( "Global-ItemspawnX" = position x && "Global-ItemspawnY" = position y ) || ! touches actor or object(Rock instance))) {
              Delete this clone;
            }
            If (condition: (position y > "KrishnaY")) {
              Set (motion type: (moving and bouncing under gravity));
              If (condition: ("Local: is bouncing")) {
                Set (variable: ("Local: is bouncing"), value: (false));
              }
            } else {
              Set (motion type: (moving and bouncing under gravity));
              If (condition: (! "Local: is bouncing")) {
                Set (variable: ("Local: is bouncing"), value: (true));
                If (condition: (touches actor or object(Krishna))) {
                  Broadcast (message: ('Bounce off behindRock from below!'));
                }
              }
            }
          }
        }
      }
    }
    Actor or object 'Wave Controller' {
      Looks {
        'DungeonW1': 'DungeonW1.png',
        'DungeonW2': 'DungeonW2.png',
        'DungeonW3': 'DungeonW3.png',
        'DungeonW4': 'DungeonW4.png',
        'DungeonW5': 'DungeonW5.png',
        'DungeonWB': 'DungeonW5_#0.png'
      }
      Locals {
        "Transparency",
        "Wait Time"
      }
      Scripts {
        When scene starts {
          Set (variable: ("Transparency"), value: (10));
          Set (variable: ("Wait Time"), value: (0.1));
          Set (variable: ("Is tutorial"), value: (0));
          Place at (x: (9), y: (153));
          Set (transparency percentage: (100));
          Hide;
          If (condition: ("Wave Number" = 0)) {
            Set (variable: ("Is tutorial"), value: (1));
            Broadcast (message: ('Start tutorial'));
          }
          If (condition: ("Wave Number" = 1)) {
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('Start wave 0'));
          }
          If (condition: ("Wave Number" = 2)) {
            Switch to (look: ('DungeonW2'));
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('Start wave 1'));
          }
          If (condition: ("Wave Number" = 3)) {
            Switch to (look: ('DungeonW3'));
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('Start wave 2'));
          }
          If (condition: ("Wave Number" = 4)) {
            Switch to (look: ('DungeonW4'));
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('Start wave 3'));
          }
          If (condition: ("Wave Number" = 5)) {
            Switch to (look: ('DungeonW5'));
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('Start wave 4'));
          }
          If (condition: ("Wave Number" = 6)) {
            Switch to (look: ('DungeonWB'));
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('Start wave boss'));
          }
          If (condition: ("Wave Number" = 7)) {
            Switch to (look: ('DungeonW1'));
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('Start wave 1 level 2'));
          }
          If (condition: ("Wave Number" = 8)) {
            Switch to (look: ('DungeonW2'));
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('Start wave 2 level 2'));
          }
          If (condition: ("Wave Number" = 9)) {
            Switch to (look: ('DungeonW3'));
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('Start wave 3 level 2'));
          }
          If (condition: ("Wave Number" = 10)) {
            Switch to (look: ('DungeonW4'));
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('Start wave 4 level 2'));
          }
          If (condition: ("Wave Number" = 11)) {
            Switch to (look: ('DungeonW5'));
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('Start wave 5 level 2'));
          }
          If (condition: ("Wave Number" = 12)) {
            Switch to (look: ('DungeonWB'));
            Broadcast and wait (message: ('Wave controller image'));
            Broadcast (message: ('spawnputna'));
          }
          If (condition: ("Wave Number" = 13)) {
            Start (scene: ('Credit Scene'));
          }
        }
        When you receive (message: ('Wave controller image')) {
          Show;
          Repeat (times: (10)) {
            Change transparency by (value: (- "Transparency"));
            Wait (seconds: ("Wait Time"));
          }
          Wait (seconds: (1));
          Repeat (times: (10)) {
            Change transparency by (value: ("Transparency"));
            Wait (seconds: ("Wait Time"));
          }
          Hide;
        }
      }
    }
    Actor or object 'Rock controller' {
      Looks {
        'My actor or object (1)': 'My actor or object_#4.png'
      }
      Locals {
        "Local-RockNumber"
      }
      Scripts {
        When scene starts {
          Repeat until (condition: (number of items( *Local-Allrockpositions* ) = 0)) {
            Delete item at (list: (*Local-Allrockpositions*), position: (1));
          }
          Wait (seconds: (0.1));
          If (condition: ("Is tutorial")) {
          } else {
            Set (variable: ("Local-RockNumber"), value: (random value from to( 4 , 8 )));
            Repeat (times: ("Local-RockNumber")) {
              Set (variable: ("Global-RockSpawnX"), value: (random value from to( 0 , 8 )));
              Set (variable: ("Global-RockSpawnY"), value: (random value from to( 1 , 3 )));
              Repeat until (condition: (! ( ( "Global-RockSpawnX" = 3 || "Global-RockSpawnX" = 4 ) && "Global-RockSpawnY" = 3 ))) {
                Set (variable: ("Global-RockSpawnX"), value: (random value from to( 0 , 8 )));
                Set (variable: ("Global-RockSpawnY"), value: (random value from to( 1 , 3 )));
              }
              If (condition: (! contains( *Local-Allrockpositions* , ( "Global-RockSpawnX" + ( "Global-RockSpawnY" ÷ 100 ) ) ))) {
                Add (list: (*Local-Allrockpositions*), item: ("Global-RockSpawnX" + ( "Global-RockSpawnY" ÷ 100 )));
                Create clone of (actor or object: ('Rock instance'));
                Create clone of (actor or object: ('behind rock'));
              }
            }
            Add (list: (*Local-Allrockpositions*), item: (*Local-Allrockpositions*));
            Set (variable: ("Local-RockNumber"), value: (item( 1 , item( 1 , *tmp-testlist* ) )));
          }
        }
      }
    }
    Actor or object 'Bomb Number ' {
      Looks {
        '0': '0_#2.png',
        '1': '1_#2.png',
        '2': '2_#2.png',
        '3': '3_#2.png',
        '4': '4_#2.png',
        '5': '5_#1.png',
        '6': '6_#1.png',
        '7': '7_#1.png',
        '8': '8_#1.png',
        '9': '9_#1.png'
      }
      Scripts {
        When scene starts {
          Show;
          Wait (seconds: (0.1));
          Place at (x: (590), y: (- 246));
          Switch to (look by number: ("Actual number of bombs" + 1));
          Forever {
            Come to front;
          }
        }
        When you receive (message: ('UpdateBombNumber')) {
          Switch to (look by number: ("Actual number of bombs" + 1));
        }
        When you receive (message: ('despawn all rocks')) {
          Hide;
        }
      }
    }
    Actor or object 'Bomb Button (1)' {
      Looks {
        'Bomb Button': '2019_06_28_095721_#0.png',
        'Bomb Button disabled': '2019_06_28_095721_#1.png'
      }
      Locals {
        "local-disabled"
      }
      Scripts {
        When scene starts {
          Set (size percentage: (40));
          Place at (x: (657), y: (- 245));
          Come to front;
          Set (variable: ("Initial number of bombs"), value: (2));
          Set (variable: ("Actual number of bombs"), value: ("Initial number of bombs"));
        }
        When tapped {
          If (condition: ("local-disabled" = 0)) {
            Vibrate for (seconds: (0.1));
            If (condition: ("Actual number of bombs" > 0)) {
              Broadcast (message: ('Place Bomb'));
              Change (variable: ("Actual number of bombs"), value: (- 1));
              Broadcast (message: ('UpdateBombNumber'));
              Set (variable: ("local-disabled"), value: (1));
            }
          }
        }
        When condition becomes true (condition: ("Actual number of bombs" ≤ 0)) {
          Switch to (look: ('Bomb Button'));
          Set (variable: ("local-disabled"), value: (1));
        }
        When condition becomes true (condition: ("local-disabled" = 1)) {
          Switch to (look: ('Bomb Button disabled'));
          Wait (seconds: (5));
          If (condition: ("Actual number of bombs" > 0)) {
            Set (variable: ("local-disabled"), value: (0));
            Switch to (look: ('Bomb Button'));
          }
        }
        When condition becomes true (condition: ("Actual number of bombs" > 0)) {
          Switch to (look: ('Bomb Button'));
          Set (variable: ("local-disabled"), value: (0));
        }
      }
    }
    Actor or object 'bomb' {
      Looks {
        'bomb': 'chakra.png'
      }
      Scripts {
        When scene starts {
          Hide;
          Set (size percentage: (25));
        }
        When you receive (message: ('Place Bomb')) {
          Place at (x: ("KrishnaX"), y: ("KrishnaY" - 50));
          Set (size percentage: (25));
          Show;
          Repeat (times: (5)) {
            Repeat (times: (5)) {
              Wait (seconds: (0.1));
              Turn (direction: (left), degrees: (15));
            }
            Change size by (value: (5));
          }
          Repeat (times: (10)) {
            Wait (seconds: (0.1));
            Turn (direction: (left), degrees: (15));
          }
          Broadcast (message: ('bomb will explode'));
        }
        When you receive (message: ('bomb will explode')) {
          Repeat (times: (15)) {
            Wait (seconds: (0.01));
            Change size by (value: (2));
          }
          If (condition: (touches actor or object(Krishna))) {
            Broadcast (message: ('Krishna is hurt'));
            Broadcast (message: ('HC:Remove half a health'));
          }
          Repeat (times: (10)) {
            Wait (seconds: (0.05));
            Change size by (value: (- 10));
          }
        }
      }
    }
    Actor or object 'Coin Controller' {
      Scripts {
        When you receive (message: ('Update Coin Controller')) {
          Set (variable: ("Picked Coins"), value: ("Picked Coins" + 1));
          Write on device (variable: ("Picked Coins"));
          Broadcast (message: ('Update Both Numbers'));
        }
      }
    }
    Actor or object 'Coin' {
      Looks {
        '1': '2019_06_27_105526.png',
        '2': '2019_06_27_105537.png',
        '3': '2019_06_27_105557.png',
        '4': '2019_06_27_104924.png',
        '5': '2019_06_27_105603.png',
        '6': '2019_06_27_105513.png',
        '7': '2019_06_27_105520.png'
      }
      Sounds {
        '166184__drminky__retro-coin-collect': '166184__drminky__retro-coin-collect.wav'
      }
      Locals {
        "Coin Wait Time"
      }
      Scripts {
        When scene starts {
          Hide;
          Set (variable: ("Coin Wait Time"), value: (0.1));
          Set (size percentage: (150));
        }
        When condition becomes true (condition: (touches actor or object(Krishna))) {
          Broadcast (message: ('Update Coin Controller'));
          Start (sound: ('166184__drminky__retro-coin-collect'));
          Delete this clone;
        }
        When you start as a clone {
          Place at (x: (regular expression( '(.+)#' , item( 1 , *Item spawn positions* ) )), y: (regular expression( '#(.+)' , item( 1 , *Item spawn positions* ) )));
          Delete item at (list: (*Item spawn positions*), position: (1));
          Set (variable: ("Item spawned"), value: (true));
          Show;
          Forever {
            Next look;
            Wait (seconds: ("Coin Wait Time"));
          }
        }
      }
    }
    Actor or object 'Collected Coins' {
      Looks {
        'Collected Coins': '2019_06_27_105526_#0.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (484), y: (334));
          Set (size percentage: (200));
        }
      }
    }
    Actor or object 'x' {
      Looks {
        'x': 'Lower_X.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (532), y: (336));
          Set (size percentage: (60));
        }
      }
    }
    Actor or object '1st Number' {
      Looks {
        '0': '0.png',
        '1': '1.png',
        '2': '2_#0.png',
        '3': '3.png',
        '4': '4.png',
        '5': '5.png',
        '6': '6.png',
        '7': '7.png',
        '8': '8.png',
        '9': '9.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (568), y: (331));
        }
        When you receive (message: ('Update Both Numbers')) {
          Switch to (look by number: (modulo( floor( "Picked Coins" ÷ 10 ) , 10 ) + 1));
        }
      }
    }
    Actor or object '2nd Number' {
      Looks {
        '0': '0_#0.png',
        '1': '1_#0.png',
        '2': '2_#1.png',
        '3': '3_#0.png',
        '4': '4_#0.png',
        '5': '5_#0.png',
        '6': '6_#0.png',
        '7': '7_#0.png',
        '8': '8_#0.png',
        '9': '9_#0.png'
      }
      Scripts {
        When scene starts {
          Read from device (variable: ("Picked Coins"));
          Place at (x: (602), y: (331));
          Broadcast (message: ('Update Both Numbers'));
        }
        When you receive (message: ('Update Both Numbers')) {
          Switch to (look by number: (modulo( "Picked Coins" , 10 ) + 1));
        }
      }
    }
    Actor or object 'agility potion Number' {
      Looks {
        '0': '0_#5.png',
        '1': '1_#5.png',
        '2': '2_#5.png',
        '3': '3_#5.png',
        '4': '4_#5.png',
        '5': '5_#4.png',
        '6': '6_#4.png',
        '7': '7_#4.png',
        '8': '8_#4.png',
        '9': '9_#4.png',
        'plus': 'plus.png'
      }
      Scripts {
        When scene starts {
          Show;
          Wait (seconds: (0.1));
          Place at (x: (586), y: (92));
          Switch to (look by number: ("actual number of agility potions" + 1));
          Forever {
            Come to front;
          }
        }
        When you receive (message: ('updateagilitypotionnumber')) {
          Switch to (look by number: ("actual number of agility potions" + 1));
        }
        When you receive (message: ('despawn all rocks')) {
          Hide;
        }
      }
    }
    Actor or object 'agility potion Button ' {
      Looks {
        'Button': '2019_06_28_095721_#6.png',
        'Button disabled': '2019_06_28_095721_#7.png'
      }
      Sounds {
        '445970__breviceps__drink-drinking-liquid': '445970__breviceps__drink-drinking-liquid.wav'
      }
      Locals {
        "local-disabled"
      }
      Scripts {
        When scene starts {
          Read from device (variable: ("actual number of agility potions"));
          Set (size percentage: (40));
          Place at (x: (657), y: (94));
          Come to front;
          // Set (variable: ("initial number of agility potions"), value: (0));
          // Set (variable: ("actual number of agility potions"), value: ("initial number of agility potions"));
        }
        When tapped {
          If (condition: ("local-disabled" = 0)) {
            Vibrate for (seconds: (0.1));
            Start (sound: ('445970__breviceps__drink-drinking-liquid'));
            If (condition: ("actual number of agility potions" > 0)) {
              Change (variable: ("actual number of agility potions"), value: (- 1));
              Broadcast (message: ('updateagilitypotionnumber'));
              Broadcast (message: ('used agility potion'));
              Set (variable: ("local-disabled"), value: (1));
              Wait (seconds: (3));
              Broadcast (message: ('reset status'));
              Broadcast (message: ('agility potion finished'));
            }
          }
        }
        When condition becomes true (condition: ("actual number of agility potions" ≤ 0)) {
          Switch to (look: ('Button disabled'));
          Set (variable: ("local-disabled"), value: (1));
        }
        When condition becomes true (condition: ("local-disabled" = 1)) {
          Switch to (look: ('Button disabled'));
          Wait (seconds: (5));
          If (condition: ("actual number of agility potions" > 0)) {
            Set (variable: ("local-disabled"), value: (0));
            Switch to (look: ('Button'));
          }
        }
        When condition becomes true (condition: ("actual number of agility potions" > 0)) {
          Switch to (look: ('Button'));
          Set (variable: ("local-disabled"), value: (0));
        }
      }
    }
    Actor or object 'invulnerability potion Number ' {
      Looks {
        '0': '0_#4.png',
        '1': '1_#4.png',
        '2': '2_#4.png',
        '3': '3_#4.png',
        '4': '4_#4.png',
        '5': '5_#3.png',
        '6': '6_#3.png',
        '7': '7_#3.png',
        '8': '8_#3.png',
        '9': '9_#3.png',
        'plus': 'plus_#0.png'
      }
      Scripts {
        When scene starts {
          Wait (seconds: (0.1));
          Show;
          Place at (x: (587), y: (- 31));
          Switch to (look by number: ("actual number of invulnerability potions" + 1));
          Forever {
            Come to front;
          }
        }
        When you receive (message: ('UpdateInvulnerabilityNumber')) {
          Switch to (look by number: ("actual number of invulnerability potions" + 1));
        }
        When you receive (message: ('despawn all rocks')) {
          Hide;
        }
      }
    }
    Actor or object 'invulnerability potion Button ' {
      Looks {
        'Button': '2019_06_28_095721_#4.png',
        'Button disabled': '2019_06_28_095721_#5.png'
      }
      Sounds {
        '445970__breviceps__drink-drinking-liquid': '445970__breviceps__drink-drinking-liquid_#0.wav'
      }
      Locals {
        "local-disabled"
      }
      Scripts {
        When scene starts {
          Read from device (variable: ("actual number of invulnerability potions"));
          Set (size percentage: (40));
          Place at (x: (659), y: (- 16));
          Come to front;
          // Set (variable: ("Initial number of invulnerability potions"), value: (0));
          // Set (variable: ("actual number of invulnerability potions"), value: ("actual number of invulnerability potions"));
        }
        When tapped {
          If (condition: ("local-disabled" = 0)) {
            Start (sound: ('445970__breviceps__drink-drinking-liquid'));
            Vibrate for (seconds: (0.1));
            If (condition: ("actual number of invulnerability potions" > 0)) {
              Change (variable: ("actual number of invulnerability potions"), value: (- 1));
              Broadcast (message: ('UpdateInvulnerabilityNumber'));
              Broadcast (message: ('used invulnerability potion'));
              Set (variable: ("local-disabled"), value: (1));
              Wait (seconds: (3));
              Broadcast (message: ('reset status'));
              Broadcast (message: ('invulnerability potion finished'));
            }
          }
        }
        When condition becomes true (condition: ("actual number of invulnerability potions" ≤ 0)) {
          Switch to (look: ('Button disabled'));
          Set (variable: ("local-disabled"), value: (1));
        }
        When condition becomes true (condition: ("local-disabled" = 1)) {
          Switch to (look: ('Button disabled'));
          Wait (seconds: (5));
          If (condition: ("actual number of invulnerability potions" > 0)) {
            Set (variable: ("local-disabled"), value: (0));
            Switch to (look: ('Button'));
          }
        }
        When condition becomes true (condition: ("actual number of invulnerability potions" > 0)) {
          Switch to (look: ('Button'));
          Set (variable: ("local-disabled"), value: (0));
        }
      }
    }
    Actor or object 'Health potion Number ' {
      Looks {
        '0': '0_#3.png',
        '1': '1_#3.png',
        '2': '2_#3.png',
        '3': '3_#3.png',
        '4': '4_#3.png',
        '5': '5_#2.png',
        '6': '6_#2.png',
        '7': '7_#2.png',
        '8': '8_#2.png',
        '9': '9_#2.png',
        'plus': 'plus_#1.png'
      }
      Scripts {
        When scene starts {
          Show;
          Wait (seconds: (0.1));
          Place at (x: (588), y: (- 138));
          Switch to (look by number: ("global-actualnumberofHealthPotions" + 1));
          Forever {
            Come to front;
          }
        }
        When you receive (message: ('UpdateHealthPotionNumber')) {
          Switch to (look by number: ("global-actualnumberofHealthPotions" + 1));
        }
        When you receive (message: ('despawn all rocks')) {
          Hide;
        }
      }
    }
    Actor or object 'Health potion Button ' {
      Looks {
        'Button': '2019_06_28_095721_#2.png',
        ' Button disabled': '2019_06_28_095721_#3.png'
      }
      Sounds {
        '445970__breviceps__drink-drinking-liquid': '445970__breviceps__drink-drinking-liquid_#1.wav'
      }
      Locals {
        "local-disabled"
      }
      Scripts {
        When scene starts {
          Read from device (variable: ("global-initialnumberofHealthPotions"));
          Set (size percentage: (40));
          Place at (x: (657), y: (- 133));
          Come to front;
          // If (condition: ("global-initialnumberofHealthPotions" = 0)) {
            // Set (variable: ("global-initialnumberofHealthPotions"), value: (0));
            // Set (variable: ("global-actualnumberofHealthPotions"), value: ("global-initialnumberofHealthPotions"));
          // } else {
          // }
        }
        When tapped {
          If (condition: ("local-disabled" = 0)) {
            Start (sound: ('445970__breviceps__drink-drinking-liquid'));
            Vibrate for (seconds: (0.1));
            If (condition: ("global-actualnumberofHealthPotions" > 0)) {
              Change (variable: ("global-actualnumberofHealthPotions"), value: (- 1));
              Broadcast (message: ('used health potion'));
              Broadcast (message: ('UpdateHealthPotionNumber'));
              Set (variable: ("local-disabled"), value: (1));
              Repeat (times: (6)) {
                Wait (seconds: (0.5));
                Broadcast (message: ('HC:Add half a health!'));
              }
              Broadcast (message: ('reset status'));
            }
          }
        }
        When condition becomes true (condition: ("global-actualnumberofHealthPotions" ≤ 0)) {
          Switch to (look: (' Button disabled'));
          Set (variable: ("local-disabled"), value: (1));
        }
        When condition becomes true (condition: ("local-disabled" = 1)) {
          Switch to (look: (' Button disabled'));
          Wait (seconds: (5));
          If (condition: ("global-actualnumberofHealthPotions" > 0)) {
            Set (variable: ("local-disabled"), value: (0));
            Switch to (look: ('Button'));
          }
        }
        When condition becomes true (condition: ("global-actualnumberofHealthPotions" > 0)) {
          Switch to (look: ('Button'));
          Set (variable: ("local-disabled"), value: (0));
        }
      }
    }
    Actor or object 'Agility Potion' {
      Looks {
        'Agility Potion': 'potion_03c_#1.png'
      }
      Scripts {
        When scene starts {
          Hide;
        }
        When you start as a clone {
          Place at (x: (regular expression( '(.+)#' , item( 1 , *Item spawn positions* ) )), y: (regular expression( '#(.+)' , item( 1 , *Item spawn positions* ) )));
          Delete item at (list: (*Item spawn positions*), position: (1));
          Set (variable: ("Item spawned"), value: (true));
          Show;
        }
        When condition becomes true (condition: (touches actor or object(Krishna))) {
          Change (variable: ("actual number of agility potions"), value: (1));
          Broadcast (message: ('updateagilitypotionnumber'));
          Delete this clone;
        }
      }
    }
    Actor or object 'Invulnerability Potion' {
      Looks {
        'Invulnerability Potion': 'potion_03b_#0.png'
      }
      Scripts {
        When scene starts {
          Hide;
        }
        When you start as a clone {
          Place at (x: (regular expression( '(.+)#' , item( 1 , *Item spawn positions* ) )), y: (regular expression( '#(.+)' , item( 1 , *Item spawn positions* ) )));
          Delete item at (list: (*Item spawn positions*), position: (1));
          Set (variable: ("Item spawned"), value: (true));
          Show;
        }
        When condition becomes true (condition: (touches actor or object(Krishna))) {
          Change (variable: ("actual number of invulnerability potions"), value: (1));
          Broadcast (message: ('UpdateInvulnerabilityNumber'));
          Delete this clone;
        }
      }
    }
    Actor or object 'Item Controller' {
      Locals {
        "Local: random number"
      }
      Scripts {
        When scene starts {
          Forever {
            Set (variable: ("Item spawned"), value: (false));
            Wait until (condition: (number of items( *Item spawn positions* )));
            Set (variable: ("Local: random number"), value: (random value from to( 1 , 10 )));
            If (condition: ("Local: random number" = 1)) {
              Create clone of (actor or object: ('Health Potion'));
            } else {
              If (condition: ("Local: random number" = 2)) {
                Create clone of (actor or object: ('Agility Potion'));
              } else {
                If (condition: ("Local: random number" = 3)) {
                  Create clone of (actor or object: ('Invulnerability Potion'));
                } else {
                  Create clone of (actor or object: ('Coin'));
                }
              }
            }
            Wait until (condition: ("Item spawned"));
          }
        }
        When you receive (message: ('Spawn Items From Rocks')) {
          Set (variable: ("Random Number"), value: (random value from to( 1 , 10 )));
          If (condition: ("Random Number" = 1)) {
            Broadcast (message: ('openDoor'));
          } else {
            If (condition: ("Random Number" = 2)) {
              Broadcast (message: ('openDoor'));
            } else {
              If (condition: ("Random Number" = 3)) {
                Broadcast (message: ('openDoor'));
              } else {
                Broadcast (message: ('openDoor'));
              }
            }
          }
        }
      }
    }
    Actor or object 'Health Potion' {
      Looks {
        'Health Potion': 'potion_03a_#0.png'
      }
      Scripts {
        When scene starts {
          Hide;
        }
        When you start as a clone {
          Place at (x: (regular expression( '(.+)#' , item( 1 , *Item spawn positions* ) )), y: (regular expression( '#(.+)' , item( 1 , *Item spawn positions* ) )));
          Delete item at (list: (*Item spawn positions*), position: (1));
          Set (variable: ("Item spawned"), value: (true));
          Show;
        }
        When condition becomes true (condition: (touches actor or object(Krishna))) {
          Change (variable: ("global-actualnumberofHealthPotions"), value: (1));
          Broadcast (message: ('UpdateHealthPotionNumber'));
          Delete this clone;
        }
      }
    }
    Actor or object 'Transition animation' {
      Looks {
        'Transistion (1)': 'Transistion.png',
        'Transistion': 'My actor or object.png'
      }
      Scripts {
        When scene starts {
          Hide;
        }
        When you receive (message: ('Changescene')) {
          Broadcast (message: ('despawn all rocks'));
          Show;
          Come to front;
          Repeat (times: (30)) {
            Change size by (value: (40));
          }
        }
      }
    }
    Actor or object 'Follower bat' {
      Looks {
        'Follower bat': 'bat6.png',
        'bat7': 'bat7.png'
      }
      Sounds {
        '83899__jedimichael__swipes': '83899__jedimichael__swipes_#0.wav'
      }
      Locals {
        "time 1",
        "protected period",
        "random number of bat",
        "initial bat position",
        "initial bat position x",
        "initial bat position y"
      }
      Scripts {
        When scene starts {
          Hide;
          Set (size percentage: (100));
          Set (variable: ("time 1"), value: (0.2));
          Set (variable: ("protected period"), value: (5));
        }
        When you receive (message: ('Start follower bat')) {
          If (condition: ("Follower bat difficulty" = 'easy')) {
            Set (variable: ("random number of bat"), value: (random value from to( 1 , 3 )));
            Repeat (times: ("random number of bat")) {
              Create clone of (actor or object: (yourself));
              Change (variable: ("Total Number of Enemies"), value: (1));
            }
          } else {
            If (condition: ("Follower bat difficulty" = 'medium')) {
              Set (variable: ("random number of bat"), value: (random value from to( 4 , 6 )));
              Repeat (times: ("random number of bat")) {
                Create clone of (actor or object: (yourself));
                Change (variable: ("Total Number of Enemies"), value: (1));
              }
            } else {
              If (condition: ("Follower bat difficulty" = 'hard')) {
                Set (variable: ("random number of bat"), value: (random value from to( 7 , 9 )));
                Repeat (times: ("random number of bat")) {
                  Create clone of (actor or object: (yourself));
                  Change (variable: ("Total Number of Enemies"), value: (1));
                }
              }
            }
          }
        }
        When you start as a clone {
          Set (variable: ("initial bat position x"), value: (random value from to( - 500 , 500 )));
          Set (variable: ("initial bat position y"), value: (random value from to( - 200 , 200 )));
          If (condition: (( "initial bat position x" < 90 ) && ( "initial bat position x" > 0 ))) {
            Change (variable: ("initial bat position x"), value: (90));
          } else {
            If (condition: (( "initial bat position x" < 0 ) && ( "initial bat position x" > - 90 ))) {
              Change (variable: ("initial bat position x"), value: (- 90));
            }
          }
          Place at (x: ("initial bat position x"), y: ("initial bat position y"));
          Show;
          Wait (seconds: (4));
          Forever {
            Glide to (x: ("KrishnaX" + random value from to( - 100 , 100 )), y: ("KrishnaY" + random value from to( - 100 , 100 )), seconds: (3));
          }
        }
        When you start as a clone {
          Forever {
            Wait (seconds: ("time 1"));
            Next look;
          }
        }
        When you start as a clone {
          Forever {
            If (condition: (touches actor or object(Krishna))) {
              If (condition: ("KrishnaProtected" = 0)) {
                Broadcast and wait (message: ('Krishna is hurt'));
                Broadcast and wait (message: ('HC:Remove half a health'));
                Set (variable: ("KrishnaProtected"), value: (1));
                Wait (seconds: ("protected period"));
                Set (variable: ("KrishnaProtected"), value: (0));
              }
            }
          }
        }
        When condition becomes true (condition: (touches actor or object(Arrow) || touches actor or object(Bomb))) {
          Add (list: (*Bats death positions*), item: (join( join( position x , '#' ) , position y )));
          Change (variable: ("Total Number of Enemies"), value: (- 1));
          Hide;
          Set (volume percentage: (60));
          Start (sound: ('83899__jedimichael__swipes'));
          Delete this clone;
        }
      }
    }
    Actor or object 'Teleport bat' {
      Looks {
        '2019_06_12_105956': '2019_06_12_105956_#0.png',
        '2019_06_12_110012': '2019_06_12_110012_#0.png'
      }
      Sounds {
        '83899__jedimichael__swipes': '83899__jedimichael__swipes_#1.wav'
      }
      Locals {
        "time 1",
        "protected period",
        "random number of bat",
        "initial bat position x",
        "initial bat position y",
        "random number of teleport bat"
      }
      Scripts {
        When scene starts {
          Hide;
          Set (variable: ("time 1"), value: (0.2));
          Set (variable: ("protected period"), value: (5));
        }
        When you receive (message: ('Start teleport bat')) {
          If (condition: ("Teleport bat difficulty" = 'easy')) {
            Set (variable: ("random number of teleport bat"), value: (random value from to( 1 , 3 )));
            Repeat (times: ("random number of teleport bat")) {
              Create clone of (actor or object: (yourself));
              Change (variable: ("Total Number of Enemies"), value: (1));
            }
          } else {
            If (condition: ("Teleport bat difficulty" = 'medium')) {
              Set (variable: ("random number of teleport bat"), value: (random value from to( 4 , 6 )));
              Repeat (times: ("random number of teleport bat")) {
                Create clone of (actor or object: (yourself));
                Change (variable: ("Total Number of Enemies"), value: (1));
              }
            } else {
              If (condition: ("Teleport bat difficulty" = 'hard')) {
                Set (variable: ("random number of teleport bat"), value: (random value from to( 6 , 9 )));
                Repeat (times: ("random number of teleport bat")) {
                  Create clone of (actor or object: (yourself));
                  Change (variable: ("Total Number of Enemies"), value: (1));
                }
              } else {
              }
            }
          }
        }
        When you start as a clone {
          Set (variable: ("initial bat position x"), value: (random value from to( - 500 , 500 )));
          Set (variable: ("initial bat position y"), value: (random value from to( - 200 , 200 )));
          If (condition: (( "initial bat position x" > 0 ) && ( "initial bat position x" < 90 ))) {
            Change (variable: ("initial bat position x"), value: (90));
          } else {
            If (condition: (( "initial bat position x" < 0 ) && ( "initial bat position x" > - 90 ))) {
              Change (variable: ("initial bat position x"), value: (- 90));
            }
          }
          Place at (x: ("initial bat position x"), y: ("initial bat position y"));
          Show;
          Wait (seconds: (4));
          Forever {
            Hide;
            Wait (seconds: (3));
            Place at (x: (random value from to( - 800 , 800 )), y: (random value from to( - 400 , 400 )));
            Show;
            Glide to (x: ("KrishnaX" + random value from to( - 100 , 100 )), y: ("KrishnaY" + random value from to( - 100 , 100 )), seconds: (3));
          }
        }
        When you start as a clone {
          Set (volume percentage: (60));
          Forever {
            If (condition: (touches actor or object(Krishna))) {
              If (condition: ("KrishnaProtected" = 0)) {
                Broadcast and wait (message: ('Krishna is hurt'));
                Broadcast and wait (message: ('HC:Remove half a health'));
                Set (variable: ("KrishnaProtected"), value: (1));
                Wait (seconds: ("protected period"));
                Set (variable: ("KrishnaProtected"), value: (0));
              }
            }
          }
        }
        When you start as a clone {
          Forever {
            Wait (seconds: ("time 1"));
            Next look;
          }
        }
        When condition becomes true (condition: (touches actor or object(Arrow) || touches actor or object(Bomb))) {
          Add (list: (*Bats death positions*), item: (join( join( position x , '#' ) , position y )));
          Change (variable: ("Total Number of Enemies"), value: (- 1));
          Hide;
          Set (volume percentage: (60));
          Start (sound: ('83899__jedimichael__swipes'));
          Delete this clone;
        }
      }
    }
    Actor or object 'Bat death' {
      Looks {
        'die1': 'die1.png',
        'die2': 'die2.png',
        'die3': 'die3.png',
        'die4': 'die4.png'
      }
      Sounds {
        '83899__jedimichael__swipes': '83899__jedimichael__swipes.wav'
      }
      Locals {
        "Local: dead bat position"
      }
      Scripts {
        When scene starts {
          Hide;
          Forever {
            Wait until (condition: (number of items( *Bats death positions* )));
            Set (variable: ("Dead bat created"), value: (false));
            Create clone of (actor or object: (yourself));
            Set (volume percentage: (60));
            Start (sound: ('83899__jedimichael__swipes'));
            Wait until (condition: ("Dead bat created"));
          }
        }
        When you start as a clone {
          Set (variable: ("Local: dead bat position"), value: (item( 1 , *Bats death positions* )));
          Delete item at (list: (*Bats death positions*), position: (1));
          Set (variable: ("Dead bat created"), value: (true));
          Place at (x: (regular expression( '(.+)#' , "Local: dead bat position" )), y: (regular expression( '#(.+)' , "Local: dead bat position" )));
          Show;
          Repeat (times: (3)) {
            Wait (seconds: (0.2));
            Next look;
          }
          Add (list: (*Item spawn positions*), item: ("Local: dead bat position"));
          Delete this clone;
        }
      }
    }
    Actor or object 'Enemies controller' {
      Locals {
        "Random wave composition",
        "Random wave 1 composition"
      }
      Scripts {
        When you receive (message: ('Start wave boss')) {
          Broadcast (message: ('start boss'));
        }
        When you receive (message: ('Start wave 0')) {
          Set (variable: ("Random wave composition"), value: (random value from to( 1 , 3 )));
          If (condition: ("Random wave composition" = 1)) {
            Set (variable: ("Follower bat difficulty"), value: ('easy'));
            Broadcast (message: ('Start follower bat'));
          } else {
            If (condition: ("Random wave composition" = 2)) {
              Set (variable: ("Teleport bat difficulty"), value: ('easy'));
              Broadcast (message: ('Start teleport bat'));
            } else {
              Set (variable: ("Teleport bat difficulty"), value: ('easy'));
              Set (variable: ("Follower bat difficulty"), value: ('easy'));
              Broadcast (message: ('Start follower bat'));
              Broadcast (message: ('Start teleport bat'));
            }
          }
        }
        When you receive (message: ('Start wave 1')) {
          Set (variable: ("Random wave composition"), value: (random value from to( 1 , 3 )));
          If (condition: ("Random wave composition" = 1)) {
            Set (variable: ("Follower bat difficulty"), value: ('easy'));
            Set (variable: ("Teleport bat difficulty"), value: ('easy'));
            Broadcast (message: ('Start teleport bat'));
            Broadcast (message: ('Start follower bat'));
          } else {
            If (condition: ("Random wave composition" = 2)) {
              Set (variable: ("Teleport bat difficulty"), value: ('easy'));
              Set (variable: ("Follower bat difficulty"), value: ('medium'));
              Broadcast (message: ('Start teleport bat'));
              Broadcast (message: ('Start follower bat'));
            } else {
              Set (variable: ("Teleport bat difficulty"), value: ('medium'));
              Set (variable: ("Follower bat difficulty"), value: ('easy'));
              Broadcast (message: ('Start follower bat'));
              Broadcast (message: ('Start teleport bat'));
            }
          }
        }
        When you receive (message: ('Start wave 2')) {
          Set (variable: ("Random wave composition"), value: (random value from to( 1 , 3 )));
          If (condition: ("Random wave composition" = 1)) {
            Set (variable: ("Follower bat difficulty"), value: ('medium'));
            Broadcast (message: ('Start follower bat'));
          } else {
            If (condition: ("Random wave composition" = 2)) {
              Set (variable: ("Teleport bat difficulty"), value: ('medium'));
              Broadcast (message: ('Start teleport bat'));
            } else {
              Set (variable: ("Teleport bat difficulty"), value: ('medium'));
              Set (variable: ("Follower bat difficulty"), value: ('medium'));
              Broadcast (message: ('Start follower bat'));
              Broadcast (message: ('Start teleport bat'));
            }
          }
        }
        When you receive (message: ('Start wave 3')) {
          Set (variable: ("Random wave composition"), value: (random value from to( 1 , 2 )));
          If (condition: ("Random wave composition" = 1)) {
            Set (variable: ("Follower bat difficulty"), value: ('medium'));
            Set (variable: ("Teleport bat difficulty"), value: ('hard'));
            Broadcast (message: ('Start teleport bat'));
            Broadcast (message: ('Start follower bat'));
          } else {
            If (condition: ("Random wave composition" = 2)) {
              Set (variable: ("Teleport bat difficulty"), value: ('medium'));
              Set (variable: ("Follower bat difficulty"), value: ('hard'));
              Broadcast (message: ('Start follower bat'));
              Broadcast (message: ('Start teleport bat'));
            } else {
            }
          }
        }
        When you receive (message: ('Start wave 4')) {
          Set (variable: ("Random wave composition"), value: (random value from to( 1 , 3 )));
          If (condition: ("Random wave composition" = 1)) {
            Set (variable: ("Follower bat difficulty"), value: ('hard'));
            Broadcast (message: ('Start follower bat'));
          } else {
            If (condition: ("Random wave composition" = 2)) {
              Set (variable: ("Teleport bat difficulty"), value: ('hard'));
              Broadcast (message: ('Start teleport bat'));
            } else {
              Set (variable: ("Teleport bat difficulty"), value: ('hard'));
              Set (variable: ("Follower bat difficulty"), value: ('hard'));
              Broadcast (message: ('Start follower bat'));
              Broadcast (message: ('Start teleport bat'));
            }
          }
        }
        When you receive (message: ('Start wave 1 level 2')) {
          Set (variable: ("number of purple crow"), value: (3));
          Set (variable: ("number of green crow"), value: (3));
          Broadcast (message: ('Start purple crow'));
          Broadcast (message: ('Start Green crow'));
        }
        When you receive (message: ('Start wave 2 level 2')) {
          Set (variable: ("number of rock crow"), value: (1));
          Set (variable: ("number of purple crow"), value: (2));
          Set (variable: ("number of green crow"), value: (2));
          Broadcast (message: ('Start rock crow'));
          Broadcast (message: ('Start purple crow'));
          Broadcast (message: ('Start Green crow'));
        }
        When you receive (message: ('Start wave 3 level 2')) {
          Set (variable: ("number of rock crow"), value: (2));
          Set (variable: ("number of orange crow"), value: (1));
          Set (variable: ("number of purple crow"), value: (2));
          Set (variable: ("number of green crow"), value: (2));
          Broadcast (message: ('Start rock crow'));
          Broadcast (message: ('Start purple crow'));
          Broadcast (message: ('Start Green crow'));
          Broadcast (message: ('Start Orange Crow'));
        }
        When you receive (message: ('Start wave 4 level 2')) {
          Set (variable: ("number of rock crow"), value: (2));
          Set (variable: ("number of orange crow"), value: (3));
          Set (variable: ("number of purple crow"), value: (5));
          Broadcast (message: ('Start rock crow'));
          Broadcast (message: ('Start Orange Crow'));
          Broadcast (message: ('Start purple crow'));
        }
        When you receive (message: ('Start wave 5 level 2')) {
          Set (variable: ("number of rock crow"), value: (2));
          Set (variable: ("number of orange crow"), value: (3));
          Set (variable: ("number of purple crow"), value: (3));
          Set (variable: ("number of green crow"), value: (4));
          Broadcast (message: ('Start Green crow'));
          Broadcast (message: ('Start Orange Crow'));
          Broadcast (message: ('Start purple crow'));
          Broadcast (message: ('Start rock crow'));
        }
      }
    }
    Actor or object 'Rock crow' {
      Looks {
        'Rock crow': 'crow1.png',
        'crow2': 'crow2.png',
        'rock2': 'rock2.png'
      }
      Sounds {
        'Crow': 'Crow'
      }
      Locals {
        "random number of crowns",
        "position of crow x",
        "position of crow y",
        "glide crow",
        "protected period",
        "fly crow"
      }
      Scripts {
        When scene starts {
          Hide;
          Set (size percentage: (65));
          Set (variable: ("protected period"), value: (5));
        }
        When you receive (message: ('Start rock crow')) {
          Repeat (times: ("number of rock crow")) {
            Set (variable: ("position of crow x"), value: (random value from to( 0 , 8 )));
            Set (variable: ("position of crow y"), value: (random value from to( 0 , 3 )));
            If (condition: (( "position of crow x" < 90 ) && ( "position of crow x" > 0 ))) {
              Change (variable: ("random number of crowns"), value: (90));
            } else {
              If (condition: (( "position of crow x" < 0 ) && ( "position of crow x" > - 90 ))) {
                Change (variable: ("random number of crowns"), value: (- 90));
              }
            }
            Create clone of (actor or object: (yourself));
            Change (variable: ("Total Number of Enemies"), value: (1));
          }
        }
        When you start as a clone {
          Switch to (look: ('rock2'));
          Place at (x: (( "position of crow x" × 145 ) - 650), y: (( "position of crow y" × 155 ) - 250));
          Show;
          Set (variable: ("fly crow"), value: (1));
          Wait (seconds: (2));
          Forever {
            Wait (seconds: (2));
            Set (size percentage: (65));
            Switch to (look: ('rock2'));
            Wait (seconds: (3));
            Set (variable: ("glide crow"), value: (0));
            Broadcast (message: ('start glide crow'));
            Set (size percentage: (100));
            Repeat (times: (20)) {
              Switch to (look: ('Rock crow'));
              Wait (seconds: (0.2));
              Switch to (look: ('crow2'));
              Wait (seconds: (0.2));
            }
            Set (variable: ("glide crow"), value: (1));
          }
        }
        When you receive (message: ('start glide crow')) {
          Repeat until (condition: ("glide crow")) {
            Glide to (x: ("KrishnaX" + random value from to( - 100 , 100 )), y: ("KrishnaY" + random value from to( - 100 , 100 )), seconds: (2));
          }
        }
        When you start as a clone {
          Forever {
            If (condition: (touches actor or object(Krishna))) {
              If (condition: ("KrishnaProtected" = 0)) {
                Broadcast and wait (message: ('Krishna is hurt'));
                Broadcast and wait (message: ('HC:Remove half a health'));
                Set (variable: ("KrishnaProtected"), value: (1));
                Wait (seconds: ("protected period"));
                Set (variable: ("KrishnaProtected"), value: (0));
              }
            }
          }
        }
        When condition becomes true (condition: (touches actor or object(Arrow) || touches actor or object(Bomb))) {
          Add (list: (*Bats death positions*), item: (join( join( position x , '#' ) , position y )));
          Change (variable: ("Total Number of Enemies"), value: (- 1));
          Hide;
          Set (volume percentage: (70));
          Start (sound: ('Crow'));
          Delete this clone;
        }
      }
    }
    Actor or object 'Purple crow' {
      Looks {
        'Purple crow': 'crow6.png',
        'crow5': 'crow5.png'
      }
      Sounds {
        'Crow': 'Crow_#0'
      }
      Locals {
        "time 1",
        "protected period",
        "random number of crow",
        "initial crow position x",
        "initial crow position y",
        "Initial hp"
      }
      Scripts {
        When scene starts {
          Hide;
          Set (size percentage: (100));
          Set (variable: ("time 1"), value: (0.2));
          Set (variable: ("protected period"), value: (5));
        }
        When you receive (message: ('Start purple crow')) {
          Repeat (times: ("number of purple crow")) {
            Create clone of (actor or object: (yourself));
            Change (variable: ("Total Number of Enemies"), value: (1));
          }
        }
        When you start as a clone {
          Set (variable: ("Initial hp"), value: (5));
          Set (variable: ("initial crow position x"), value: (random value from to( - 500 , 500 )));
          Set (variable: ("initial crow position y"), value: (random value from to( - 200 , 200 )));
          If (condition: (( "initial crow position x" < 90 ) && ( "initial crow position x" > 0 ))) {
            Change (variable: ("initial crow position x"), value: (90));
          } else {
            If (condition: (( "initial crow position x" < 0 ) && ( "initial crow position x" > - 90 ))) {
              Change (variable: ("initial crow position x"), value: (- 90));
            }
          }
          Place at (x: ("initial crow position x"), y: ("initial crow position y"));
          Show;
          Wait (seconds: (4));
          Forever {
            Glide to (x: ("KrishnaX" + random value from to( - 100 , 100 )), y: ("KrishnaY" + random value from to( - 100 , 100 )), seconds: (3));
          }
        }
        When you start as a clone {
          Forever {
            Wait (seconds: ("time 1"));
            Next look;
          }
        }
        When you start as a clone {
          Forever {
            If (condition: (touches actor or object(Krishna))) {
              If (condition: ("KrishnaProtected" = 0)) {
                Broadcast and wait (message: ('Krishna is hurt'));
                Broadcast and wait (message: ('HC:Remove half a health'));
                Set (variable: ("KrishnaProtected"), value: (1));
                Wait (seconds: ("protected period"));
                Set (variable: ("KrishnaProtected"), value: (0));
              }
            }
          }
        }
        When condition becomes true (condition: (touches actor or object(Bomb))) {
          Add (list: (*Bats death positions*), item: (join( join( position x , '#' ) , position y )));
          Change (variable: ("Total Number of Enemies"), value: (- 1));
          Hide;
          Set (volume percentage: (70));
          Start (sound: ('Crow'));
          Delete this clone;
        }
        When condition becomes true (condition: (touches actor or object(Arrow))) {
          Change (variable: ("Initial hp"), value: (- 1));
          If (condition: ("Initial hp" < 1)) {
            Add (list: (*Bats death positions*), item: (join( join( position x , '#' ) , position y )));
            Change (variable: ("Total Number of Enemies"), value: (- 1));
            Hide;
            Set (volume percentage: (70));
            Start (sound: ('Crow'));
            Delete this clone;
          }
        }
      }
    }
    Actor or object 'Green Crow' {
      Looks {
        'Green Crow': 'crow1_#0.png',
        'crow2': 'crow2_#0.png'
      }
      Sounds {
        'Crow': 'Crow_#1'
      }
      Locals {
        "time1",
        "protected period",
        "Green Crow counter",
        "initial Green Crow x",
        "initial Green Crow y"
      }
      Scripts {
        When scene starts {
          Hide;
          Set (variable: ("time1"), value: (0.4));
          Set (variable: ("protected period"), value: (5));
        }
        When you receive (message: ('Start Green crow')) {
          Repeat (times: ("number of green crow")) {
            Create clone of (actor or object: (yourself));
            Change (variable: ("Total Number of Enemies"), value: (1));
          }
        }
        When you start as a clone {
          Set (variable: ("initial Green Crow x"), value: (random value from to( - 500 , 500 )));
          Set (variable: ("initial Green Crow y"), value: (random value from to( - 200 , 200 )));
          If (condition: (( "initial Green Crow x" > 0 ) && ( "initial Green Crow x" < 90 ))) {
            Change (variable: ("initial Green Crow x"), value: (90));
          } else {
            If (condition: (( "initial Green Crow x" < 0 ) && ( "initial Green Crow x" > - 90 ))) {
              Change (variable: ("initial Green Crow x"), value: (- 90));
            }
          }
          Place at (x: ("initial Green Crow x"), y: ("initial Green Crow y"));
          Show;
          Wait (seconds: (4));
          Forever {
            Hide;
            Wait (seconds: (3));
            Place at (x: (random value from to( - 800 , 800 )), y: (random value from to( - 400 , 400 )));
            Show;
            Glide to (x: ("KrishnaX" + random value from to( - 100 , 100 )), y: ("KrishnaY" + random value from to( - 100 , 100 )), seconds: (3));
          }
        }
        When you start as a clone {
          Forever {
            If (condition: (touches actor or object(Krishna))) {
              If (condition: ("KrishnaProtected" = 0)) {
                Broadcast and wait (message: ('Krishna is hurt'));
                Broadcast and wait (message: ('HC:Remove half a health'));
                Set (variable: ("KrishnaProtected"), value: (1));
                Wait (seconds: ("protected period"));
                Set (variable: ("KrishnaProtected"), value: (0));
              }
            }
          }
        }
        When you start as a clone {
          Forever {
            Wait (seconds: (0.2));
            Next look;
          }
        }
        When condition becomes true (condition: (touches actor or object(Arrow) || touches actor or object(Bomb))) {
          Add (list: (*Bats death positions*), item: (join( join( position x , '#' ) , position y )));
          Change (variable: ("Total Number of Enemies"), value: (- 1));
          Hide;
          Set (volume percentage: (70));
          Start (sound: ('Crow'));
          Delete this clone;
        }
      }
    }
    Actor or object 'Orange Crow' {
      Looks {
        'Orange Crow': 'crow3.png',
        'crow4': 'crow4.png'
      }
      Sounds {
        'Crow': 'Crow_#2'
      }
      Locals {
        "time 1",
        "protected period",
        "Orange Crow Counter",
        "initial Orange Crow x",
        "initial Orange Crow y"
      }
      Scripts {
        When scene starts {
          Hide;
          Set (variable: ("time 1"), value: (0.4));
          Set (variable: ("protected period"), value: (5));
        }
        When you receive (message: ('Start Orange Crow')) {
          Repeat (times: ("number of orange crow")) {
            Create clone of (actor or object: (yourself));
            Change (variable: ("Total Number of Enemies"), value: (1));
          }
        }
        When you start as a clone {
          Set (variable: ("initial Orange Crow x"), value: (random value from to( - 500 , 500 )));
          Set (variable: ("initial Orange Crow y"), value: (random value from to( - 200 , 200 )));
          If (condition: (( "initial Orange Crow x" > 0 ) && ( "initial Orange Crow x" < 90 ))) {
            Change (variable: ("initial Orange Crow x"), value: (90));
          } else {
            If (condition: (( "initial Orange Crow x" < 0 ) && ( "initial Orange Crow x" > - 90 ))) {
              Change (variable: ("initial Orange Crow x"), value: (- 90));
            }
          }
          Place at (x: ("initial Orange Crow x"), y: ("initial Orange Crow y"));
          Show;
          Wait (seconds: (4));
          Forever {
            Glide to (x: ("KrishnaX" + random value from to( - 100 , 100 )), y: ("KrishnaY" + random value from to( - 100 , 100 )), seconds: (3));
          }
        }
        When you start as a clone {
          Forever {
            If (condition: (touches actor or object(Krishna))) {
              If (condition: ("KrishnaProtected" = 0)) {
                Broadcast and wait (message: ('Krishna is hurt'));
                Broadcast and wait (message: ('HC:Remove half a health'));
                Set (variable: ("KrishnaProtected"), value: (1));
                Wait (seconds: ("protected period"));
                Set (variable: ("KrishnaProtected"), value: (0));
              }
            }
          }
        }
        When you start as a clone {
          Forever {
            Wait (seconds: (0.2));
            Next look;
          }
        }
        When you start as a clone {
          Wait (seconds: (3));
          Forever {
            Wait (seconds: (random value from to( 4 , 8 )));
            Change volume by (value: (0));
            # This should be changed to list based scheduling as well. 
            Change volume by (value: (0));
            Set (variable: ("Orange Crow X"), value: (position x));
            Set (variable: ("Orange Crow Y"), value: (position y));
            Broadcast and wait (message: ('Fire Orange Crow Projectile'));
          }
        }
        When condition becomes true (condition: (touches actor or object(Arrow) || touches actor or object(Bomb))) {
          Add (list: (*Bats death positions*), item: (join( join( position x , '#' ) , position y )));
          Change (variable: ("Total Number of Enemies"), value: (- 1));
          Hide;
          Set (volume percentage: (70));
          Start (sound: ('Crow'));
          Delete this clone;
        }
      }
    }
    Actor or object 'Orange Crow Projectiles' {
      Looks {
        'Orange Crow Projectiles': 'fire2_6.png'
      }
      Scripts {
        When scene starts {
          Hide;
        }
        When you receive (message: ('Fire Orange Crow Projectile')) {
          Create clone of (actor or object: (yourself));
        }
        When you start as a clone {
          Show;
          Place at (x: ("Orange Crow X"), y: ("Orange Crow Y"));
          Point towards (actor or object: ('Krishna'));
          Glide to (x: ("KrishnaX"), y: ("KrishnaY"), seconds: (2));
          Delete this clone;
        }
        When you start as a clone {
          Forever {
            If (condition: (touches actor or object(Krishna))) {
              Broadcast (message: ('HC:Remove half a health'));
              Delete this clone;
            }
          }
        }
      }
    }
    Actor or object 'firedemon1' {
      Looks {
        'firedemon1': '2019_07_04_121007.png'
      }
      Scripts {
        When scene starts {
          Set (variable: ("Protected period"), value: (5));
          Hide;
        }
        When you receive (message: ('start boss')) {
          Set (variable: ("BossHp"), value: (100));
          Change (variable: ("Total Number of Enemies"), value: (1));
          Create clone of (actor or object: (yourself));
        }
        When you bounce off (actor or object: ('Krishna')) {
          If (condition: (! "KrishnaProtected")) {
            Broadcast (message: ('Krishna is hurt'));
            Broadcast (message: ('HC:Remove half a health'));
            Broadcast (message: ('HC:Remove half a health'));
          }
          Set velocity to (x steps/second: (500), y steps/second: (500));
        }
        When you start as a clone {
          Broadcast (message: ('showbosshp'));
          Set (motion type: (moving and bouncing under gravity));
          Set gravity for all actors and objects to (x steps/second²: (0), y steps/second²: (0));
          Place at (x: (372), y: (133));
          Show;
          Set velocity to (x steps/second: (600), y steps/second: (600));
          Set (bounce factor percentage: (100));
          Set (friction percentage: (0));
          Set (variable: ("Protected period"), value: (5));
        }
        When you receive (message: ('Fire demon hit')) {
          Change (variable: ("BossHp"), value: (- 2.5));
          If (condition: ("BossHp" ≤ 0)) {
            Set (variable: ("Total Number of Enemies"), value: (0));
            Broadcast (message: ('hidebosshp'));
            Delete this clone;
          }
        }
      }
    }
    Actor or object 'putna' {
      Looks {
        'putna': 'putna.png',
        'putnaattack': 'putnaattack.png',
        'putnaattack2': 'putnaattack2.png',
        'putnaattack3': 'putnaattack3.png',
        'putna (1)': 'putna_#0.png',
        'putnaattack (1)': 'putnaattack_#0.png',
        'putnaattack2 (1)': 'putnaattack2_#0.png',
        'putnaattack3 (1)': 'putnaattack3_#0.png'
      }
      Locals {
        "local-putnaposition",
        "local-putna exists"
      }
      Scripts {
        When scene starts {
          Set (variable: ("local-putnaposition"), value: (- 1));
          Set (motion type: (moving and bouncing under gravity));
          Set (rotation style: (left-right only));
          Hide;
        }
        When you receive (message: ('spawnputna')) {
          Set (variable: ("global-putnaexists"), value: (1));
          Set (variable: ("BossHp"), value: (500));
          Change (variable: ("Total Number of Enemies"), value: (1));
          Show;
          Broadcast (message: ('showbosshp'));
          Place at (x: (451), y: (- 133));
          Wait (seconds: (0.5));
          Forever {
            Set (variable: ("local-random attack"), value: (random value from to( 1 , 4 )));
            If (condition: ("local-random attack" = 4)) {
              Broadcast (message: ('putna spawn shield'));
            } else {
              If (condition: ("local-random attack" = 1)) {
                Broadcast (message: ('Putna teleport'));
              } else {
                If (condition: ("local-random attack" = 2)) {
                  Broadcast (message: ('PutnaAttack'));
                } else {
                  Broadcast (message: ('putna spawn bats'));
                }
              }
            }
            Wait (seconds: (6));
          }
        }
        When you receive (message: ('putna hit')) {
          Change (variable: ("BossHp"), value: (- 2.5));
          If (condition: ("BossHp" ≤ 0)) {
            Hide;
            Broadcast (message: ('hidebosshp'));
            Set (variable: ("global-putnaexists"), value: (0));
            Set (variable: ("Total Number of Enemies"), value: (0));
          }
        }
        When you bounce off (actor or object: ('Krishna')) {
          Broadcast (message: ('HC:Remove half a health'));
        }
        When you receive (message: ('PutnaAttack')) {
          Repeat (times: (3)) {
            Set (color: (500));
            Wait (seconds: (0.2));
            Clear graphic effects;
            Wait (seconds: (0.2));
          }
          Switch to (look by number: (1 + ( "local-putnaposition" × 4 )));
          Wait (seconds: (0.1));
          Switch to (look by number: (4 + ( "local-putnaposition" × 4 )));
          Wait (seconds: (0.1));
          Switch to (look by number: (3 + ( "local-putnaposition" × 4 )));
          Wait (seconds: (0.1));
          Switch to (look by number: (2 + ( "local-putnaposition" × 4 )));
          Wait (seconds: (0.5));
          Switch to (look by number: (3 + ( "local-putnaposition" × 4 )));
          Wait (seconds: (0.1));
          Switch to (look by number: (4 + ( "local-putnaposition" × 4 )));
          Wait (seconds: (0.1));
          Switch to (look by number: (1 + ( "local-putnaposition" × 4 )));
        }
        When you receive (message: ('Putna teleport')) {
          Set (color: (50));
          Wait (seconds: (2));
          Hide;
          Clear graphic effects;
          Set (variable: ("local-putnaposition"), value: (random value from to( 0 , 1 )));
          Wait (seconds: (2));
          If (condition: ("local-putnaposition" = 0)) {
            Place at (x: (- 425), y: (- 133));
            Set (variable: ("local-putnaposition"), value: (1));
            Set (variable: ("global-putnaposition"), value: (1));
          } else {
            Place at (x: (451), y: (- 133));
            Set (variable: ("local-putnaposition"), value: (0));
            Set (variable: ("global-putnaposition"), value: (0));
          }
          Switch to (look by number: (1 + ( 4 × "local-putnaposition" )));
          Show;
        }
        When you receive (message: ('putna spawn bats')) {
          Change color by (value: (12500));
          Wait (seconds: (1));
          Set (variable: ("Follower bat difficulty"), value: ('easy'));
          Broadcast (message: ('Start follower bat'));
          Wait (seconds: (1));
          Clear graphic effects;
        }
        When you receive (message: ('putna spawn shield')) {
          Set (color: (666555));
          Wait (seconds: (0.5));
          Create clone of (actor or object: ('putna shield'));
          Wait (seconds: (0.5));
          Clear graphic effects;
        }
      }
    }
    Actor or object 'putna shield' {
      Looks {
        'putna shield': 'shield.png'
      }
      Locals {
        "local-bouncesleft",
        "local-direction"
      }
      Scripts {
        When scene starts {
          Hide;
        }
        When you start as a clone {
          Set (variable: ("local-bouncesleft"), value: (5));
          Set (rotation style: (left-right only));
          Set (variable: ("local-direction"), value: (random value from to( 1 , 2 ) - 1));
          If (condition: ("global-putnaposition" = 0)) {
            If (condition: ("local-direction" = 0)) {
              Set (variable: ("local-direction"), value: (- 1));
            }
            Place at (x: (321), y: (0));
            Point in direction (degrees: (90));
          } else {
            Place at (x: (- 400), y: (0));
            Point in direction (degrees: (- 90));
          }
          Show;
          Forever {
            Change y by (value: (10 × ( "local-direction" )));
            If (condition: (touches edge)) {
              Change (variable: ("local-bouncesleft"), value: (- 1));
              Set (variable: ("local-direction"), value: ("local-direction" × ( - 1 )));
              If (condition: ("local-bouncesleft" < 0)) {
                Delete this clone;
              }
            }
          }
        }
      }
    }
    Actor or object 'Tips' {
      Looks {
        'Tips': 'Krishnas movement tip.png',
        'Krishnas firing tip': 'Krishnas firing tip.png'
      }
      Scripts {
        When scene starts {
          Hide;
          // Set (size percentage: (40));
          // Place at (x: (- 399), y: (48));
          // Wait (seconds: (2));
          // Show;
          // Wait (seconds: (2));
          // Switch to (look: ('Tips'));
        }
      }
    }
    Actor or object 'walls' {
      Looks {
        'wall': 'My actor or object_#7.png'
      }
      Scripts {
        When scene starts {
          Set (motion type: (moving and bouncing under gravity));
          Place at (x: (0), y: (830));
          Create clone of (actor or object: (yourself));
          Place at (x: (0), y: (- 830));
          Create clone of (actor or object: (yourself));
          Point in direction (degrees: (0));
          Place at (x: (1210), y: (0));
          Create clone of (actor or object: (yourself));
          Place at (x: (- 1210), y: (0));
        }
      }
    }
    Actor or object 'Boss status' {
      Looks {
        'Empty': 'Boss status.png',
        'Boss status': 'My actor or object_#9.png'
      }
      Scripts {
        When scene starts {
          Hide;
          Next look;
          Place at (x: (5), y: (- 281));
        }
        When you receive (message: ('showbosshp')) {
          Show;
          Show (variable: ("BossHp"), x: (5), y: (- 286), size: (120), color: ('#FF0000'), alignment: (centered));
          Forever {
            Come to front;
          }
        }
        When you receive (message: ('hidebosshp')) {
          Stop (script: (other scripts of this actor or object));
          Hide;
          Hide (variable: ("BossHp"));
        }
      }
    }
    Actor or object 'Krishna-tutorial' {
      Looks {
        'Empty': 'Krishna-tutorial.png',
        'Krishna-tutorial': 'krishna2.png'
      }
      Locals {
        "Button tutorial"
      }
      Scripts {
        When scene starts {
          Set (size percentage: (35));
          Place at (x: (320), y: (0));
          Set (variable: ("Krishna tutorial"), value: ('Click this side to shoot'));
          Set (variable: ("Button tutorial"), value: ('Click the buttons to use the items'));
        }
        When you receive (message: ('Start tutorial')) {
          Show (variable: ("Button tutorial"), x: (340), y: (- 230), size: (70), color: ('#636363'), alignment: (centered));
          Show (variable: ("Krishna tutorial"), x: (320), y: (120), size: (70), color: ('#636363'), alignment: (centered));
          Switch to (look: ('Krishna-tutorial'));
          // Say (text: ('Click this side to shoot'));
        }
        When you receive (message: ('Hide tutorial')) {
          Hide (variable: ("Button tutorial"));
          Hide (variable: ("Button tutorial"));
          Hide;
        }
      }
    }
    Actor or object 'Krishna-tutorial2' {
      Looks {
        'Empty': 'Krishna-tutorial2.png',
        'Krishna-tutorial2': 'output_s7yjHx.png'
      }
      Locals {
        "Krishna tutorial2"
      }
      Scripts {
        When scene starts {
          Set (size percentage: (35));
          Place at (x: (- 400), y: (0));
          Set (variable: ("Krishna tutorial2"), value: ('Click this side to walk'));
        }
        When you receive (message: ('Start tutorial')) {
          Show (variable: ("Krishna tutorial2"), x: (- 410), y: (120), size: (70), color: ('#636363'), alignment: (centered));
          Switch to (look: ('Krishna-tutorial2'));
        }
        When you receive (message: ('Hide tutorial')) {
          Hide (variable: ("KrishnaX"));
          Hide;
        }
      }
    }
    Actor or object 'Asset Controller' {
      Scripts {
        When scene starts {
          If (condition: ("Current Scene" = 2)) {
            Broadcast (message: ('Change Assets For Graveyard'));
          } else {
          }
        }
      }
    }
  }
  Scene 'Shop' {
    Background {
      Looks {
        'background_resized': 'background_resized.png'
      }
      Locals {
        "Health Potion Price",
        "Agility Potion Price",
        "Invulnerability Potion Price"
      }
      Scripts {
        When scene starts {
          Set (variable: ("Agility Potion Price"), value: (3));
          Set (variable: ("Invulnerability Potion Price"), value: (5));
          Set (variable: ("Health Potion Price"), value: (4));
          Show (variable: ("Health Potion Price"), x: (- 450), y: (- 160), size: (120), color: ('#000000'), alignment: (centered));
          Show (variable: ("Agility Potion Price"), x: (0), y: (- 160), size: (120), color: ('#000000'), alignment: (centered));
          Show (variable: ("Invulnerability Potion Price"), x: (500), y: (- 160), size: (120), color: ('#000000'), alignment: (centered));
        }
      }
    }
    Actor or object 'header_title' {
      Looks {
        'header_title': 'header_title.png'
      }
      Locals {
        "saved_language",
        "displaytext"
      }
      Scripts {
        When scene starts {
          Wait (seconds: (0.1));
          Place at (x: (- 14), y: (274));
          Set (variable: ("saved_language"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList-Shop* )));
          Show (variable: ("displaytext"), x: (0), y: (300), size: (100), color: (#000000), alignment: (centered));
        }
        When condition becomes true (condition: ("saved_language" ≠ "Global-CurrentLanguage")) {
          Set (variable: ("saved_language"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList-Shop* )));
        }
      }
    }
    Actor or object 'healthPotionView' {
      Looks {
        'healthPotionView': 'healthPotionView.png'
      }
      Locals {
        "displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (- 483), y: (- 68));
        }
        When condition becomes true (condition: ("savedlanguage" ≠ "Global-CurrentLanguage")) {
          Set (variable: ("savedlanguage"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList- Play* )));
        }
        When scene starts {
          Wait (seconds: (0.1));
          Place at (x: (- 482), y: (- 58));
          Set (variable: ("savedlanguage"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList-HealthPotion* )));
          Show (variable: ("displaytext"), x: (- 480), y: (125), size: (60), color: (#000000), alignment: (centered));
        }
      }
    }
    Actor or object 'movementPotionView' {
      Looks {
        'movementPotionView': 'movementPotionView.png'
      }
      Locals {
        "displaytext"
      }
      Scripts {
        When scene starts {
          Place at (x: (- 17), y: (- 52));
        }
        When condition becomes true (condition: ("savedlanguage" ≠ "Global-CurrentLanguage")) {
          Set (variable: ("savedlanguage"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList- Play* )));
        }
        When scene starts {
          Place at (x: (- 18), y: (- 53));
          Wait (seconds: (0.1));
          Switch to (look by number: ("Global-CurrentLanguage"));
          Set (variable: ("savedlanguage"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList-AgilityPotion* )));
          Show (variable: ("displaytext"), x: (0), y: (125), size: (60), color: (#000000), alignment: (centered));
        }
      }
    }
    Actor or object 'invulnerabilityPotionView' {
      Looks {
        'invulnerabilityPotionView': 'invulnerabilityPotionView.png'
      }
      Locals {
        "displaytext"
      }
      Scripts {
        When condition becomes true (condition: ("savedlanguage" ≠ "Global-CurrentLanguage")) {
          Set (variable: ("savedlanguage"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList- Play* )));
        }
        When scene starts {
          Wait (seconds: (0.1));
          Place at (x: (471), y: (- 61));
          Set (variable: ("savedlanguage"), value: ("Global-CurrentLanguage"));
          Set (variable: ("displaytext"), value: (item( "Global-CurrentLanguage" , *LanguageList-InvulnerabilityPotion* )));
          Show (variable: ("displaytext"), x: (450), y: (125), size: (60), color: (#000000), alignment: (centered));
        }
      }
    }
    Actor or object 'exit' {
      Looks {
        'exit': 'exit.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (617), y: (276));
        }
        When tapped {
          Set (variable: ("Wave Number"), value: ("Wave Number" + 1));
          Write on device (variable: ("Picked Coins"));
          If (condition: ("Wave Number" = 7)) {
            Set (variable: ("Current Scene"), value: (2));
            Start (scene: ('Cutscene 2'));
          }
          If (condition: ("Wave Number" = 13)) {
            Start (scene: ('Cutscene 3'));
          }
          Start (scene: ('Entry'));
        }
      }
    }
    Actor or object 'Collected Coins' {
      Looks {
        'Collected Coins': '2019_06_27_105526_#0.png'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (200));
          Place at (x: (322), y: (276));
        }
      }
    }
    Actor or object '1st Number' {
      Looks {
        '0': '0.png',
        '1': '1.png',
        '2': '2_#0.png',
        '3': '3.png',
        '4': '4.png',
        '5': '5.png',
        '6': '6.png',
        '7': '7.png',
        '8': '8.png',
        '9': '9.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (422), y: (273));
          Forever {
            Switch to (look by number: (modulo( floor( "Picked Coins" ÷ 10 ) , 10 ) + 1));
          }
        }
      }
    }
    Actor or object 'x' {
      Looks {
        'x': 'Lower_X.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (371), y: (275));
          Set (size percentage: (60));
        }
      }
    }
    Actor or object '2nd Number' {
      Looks {
        '0': '0_#0.png',
        '1': '1_#0.png',
        '2': '2_#1.png',
        '3': '3_#0.png',
        '4': '4_#0.png',
        '5': '5_#0.png',
        '6': '6_#0.png',
        '7': '7_#0.png',
        '8': '8_#0.png',
        '9': '9_#0.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (455), y: (273));
          Read from device (variable: ("Picked Coins"));
          Forever {
            Switch to (look by number: (modulo( "Picked Coins" , 10 ) + 1));
          }
        }
      }
    }
    Actor or object 'Purchase Health Potion' {
      Looks {
        'Purchase Health Potion': 'button_store_hover.png'
      }
      Sounds {
        '184438__capslok__cash-register-fake': '184438__capslok__cash-register-fake.wav',
        '142608__autistic-lucario__error': '142608__autistic-lucario__error.wav'
      }
      Scripts {
        When scene starts {
          Read from device (variable: ("Picked Coins"));
          Read from device (variable: ("global-actualnumberofHealthPotions"));
          Set (size percentage: (30));
          Place at (x: (- 606), y: (- 187));
        }
        When tapped {
          If (condition: ("Picked Coins" ≥ 4)) {
            Start (sound: ('184438__capslok__cash-register-fake'));
            Change (variable: ("global-actualnumberofHealthPotions"), value: (1));
            Change (variable: ("Picked Coins"), value: (- 4));
            Write on device (variable: ("Picked Coins"));
            Write on device (variable: ("global-actualnumberofHealthPotions"));
          } else {
            Start (sound: ('142608__autistic-lucario__error'));
            Say text for seconds (text: ('Insufficient coins!'), seconds: (1));
          }
        }
      }
    }
    Actor or object 'Purchase Agility Potion4' {
      Looks {
        'Purchase Agility Potion4': 'button_store_hover_#0.png'
      }
      Sounds {
        '184438__capslok__cash-register-fake': '184438__capslok__cash-register-fake_#0.wav',
        '142608__autistic-lucario__error': '142608__autistic-lucario__error_#0.wav'
      }
      Scripts {
        When scene starts {
          Read from device (variable: ("Picked Coins"));
          Read from device (variable: ("actual number of agility potions"));
          Set (size percentage: (30));
          Place at (x: (- 136), y: (- 182));
        }
        When tapped {
          If (condition: ("Picked Coins" ≥ 3)) {
            Start (sound: ('184438__capslok__cash-register-fake'));
            Change (variable: ("actual number of agility potions"), value: (1));
            Change (variable: ("Picked Coins"), value: (- 3));
            Write on device (variable: ("Picked Coins"));
            Write on device (variable: ("actual number of agility potions"));
          } else {
            Start (sound: ('142608__autistic-lucario__error'));
            Say text for seconds (text: ('Insufficient Coins'), seconds: (1));
          }
        }
      }
    }
    Actor or object 'Purchase Invulnerability Potion' {
      Looks {
        'Purchase Invulnerability Potion': 'button_store_hover_#1.png'
      }
      Sounds {
        '184438__capslok__cash-register-fake': '184438__capslok__cash-register-fake_#1.wav',
        '142608__autistic-lucario__error': '142608__autistic-lucario__error_#1.wav'
      }
      Scripts {
        When scene starts {
          Read from device (variable: ("Picked Coins"));
          Read from device (variable: ("actual number of invulnerability potions"));
          Set (size percentage: (30));
          Place at (x: (348), y: (- 185));
        }
        When tapped {
          If (condition: ("Picked Coins" ≥ 5)) {
            Start (sound: ('184438__capslok__cash-register-fake'));
            Change (variable: ("actual number of invulnerability potions"), value: (1));
            Change (variable: ("Picked Coins"), value: (- 5));
            Write on device (variable: ("Picked Coins"));
            Write on device (variable: ("actual number of invulnerability potions"));
          } else {
            Start (sound: ('142608__autistic-lucario__error'));
            Say text for seconds (text: ('Insufficient Coins'), seconds: (1));
          }
        }
      }
    }
  }
  Scene 'Cutscene 2' {
    Background {
      Looks {
        'cutscene2-1': '2019_08_22_073106.png',
        'cutscene2-2': '2019_08_22_073115.png',
        'cutscene2-3': '2019_08_22_073123.png'
      }
      Sounds {
        '376532_womb-affliction_flute-trill (online-audio-converter': '376532_womb-affliction_flute-trill (online-audio-converter.com)',
        '376532_womb-affliction_flute-trill (online-audio-converter': '376532_womb-affliction_flute-trill (online-audio-converter.com)',
        '376532_womb-affliction_flute-trill (online-audio-converter': '376532_womb-affliction_flute-trill (online-audio-converter.com)'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (90));
          Set background to (look: ('2019_07_14_125650'));
          Start (sound: ('376532_womb-affliction_flute-trill (online-audio-converter'));
        }
        When you receive (message: ('next scene')) {
          Next look;
          Set (size percentage: (90));
        }
      }
    }
    Actor or object 'skip' {
      Looks {
        'skip': '2019_08_22_073148.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (585), y: (- 260));
          Set (variable: ("scene"), value: (1));
        }
        When tapped {
          Change (variable: ("scene"), value: (1));
          If (condition: ("scene" = 4)) {
            Continue (scene: ('Shop'));
          }
          Broadcast (message: ('next scene'));
        }
      }
    }
    Actor or object 'Scene skip' {
      Looks {
        'Scene skip': '2019_08_22_072340.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (- 611), y: (- 260));
        }
        When tapped {
          Continue (scene: ('Shop'));
        }
      }
    }
  }
  Scene 'Cutscene 3' {
    Background {
      Looks {
        'cutscene3-1': '2019_08_22_074042.png',
        'cutscene3-2': '2019_08_22_074048.png',
        'cutscene3-3': '2019_08_22_074055.png',
        'cutscene3-4': '2019_08_22_074103.png',
        'cutscene3-5': '2019_08_22_074110.png',
        'cutscene3-6': '2019_08_22_074116.png'
      }
      Sounds {
        '376532_womb-affliction_flute-trill (online-audio-converter': '376532_womb-affliction_flute-trill (online-audio-converter.com)',
        'Introduction (online-audio-converter': 'Introduction (online-audio-converter.com)'
      }
      Scripts {
        When scene starts {
          Set background to (look: ('cutscene3-1'));
          Set (size percentage: (90));
          Start sound and wait (sound: ('376532_womb-affliction_flute-trill (online-audio-converter'));
          Start (sound: ('Introduction (online-audio-converter'));
        }
        When you receive (message: ('nextscene')) {
          Next look;
          Set (size percentage: (90));
        }
      }
    }
    Actor or object 'skip' {
      Looks {
        'skip': '2019_08_22_072144.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (585), y: (- 260));
          Set (variable: ("scene"), value: (1));
        }
        When tapped {
          Change (variable: ("scene"), value: (1));
          If (condition: ("scene" = 7)) {
            Start (scene: ('Credit Scene'));
          }
          Broadcast (message: ('nextscene'));
        }
      }
    }
    Actor or object 'Scene skip' {
      Looks {
        'Scene skip': '2019_08_22_072340.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (- 611), y: (- 260));
        }
        When tapped {
          Start (scene: ('Credit Scene'));
        }
      }
    }
  }
  Scene 'GameOver' {
    Background {
    }
    Actor or object 'Game Over' {
      Looks {
        'Game Over': '176.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (0), y: (100));
          Set (size percentage: (45));
        }
      }
    }
    Actor or object 'Play Again' {
      Looks {
        'Play Again': '382.png'
      }
      Scripts {
        When tapped {
          Start (scene: ('Main Menu'));
        }
        When scene starts {
          Place at (x: (0), y: (- 100));
          Set (size percentage: (60));
          Set (variable: ("Wave Number"), value: (1));
          Set (variable: ("Current Scene"), value: (1));
          Set (variable: ("global-firststarthealth"), value: (0));
          Set (variable: ("global-actualnumberofHealthPotions"), value: ("global-initialnumberofHealthPotions"));
          Set (variable: ("actual number of invulnerability potions"), value: ("Initial number of invulnerability potions"));
          Set (variable: ("actual number of agility potions"), value: ("initial number of agility potions"));
          Stop (script: (all scripts));
        }
      }
    }
  }
  Scene 'Credit Scene' {
    Background {
      Looks {
        '2019_08_17_035433': '2019_08_17_035433.png'
      }
      Sounds {
        'credit2': 'credit2'
      }
      Scripts {
        When scene starts {
          Forever {
            Start sound and wait (sound: ('credit2'));
          }
        }
      }
    }
    Actor or object 'Special Thanks' {
      Looks {
        'Special Thanks': 'My actor or object_#1.png'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (35));
          Place at (x: (0), y: (170));
        }
      }
    }
    Actor or object 'Devs' {
      Looks {
        'Devs': 'My actor or object.png'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (35));
          Place at (x: (- 450), y: (- 100));
        }
      }
    }
    Actor or object 'Mentors' {
      Looks {
        'Mentors': 'My actor or object_#0.png'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (35));
          Place at (x: (0), y: (- 100));
        }
      }
    }
    Actor or object 'External Contributors' {
      Looks {
        'External Contributors': 'My actor or object_#2.png'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (35));
          Place at (x: (450), y: (- 100));
        }
      }
    }
    Actor or object 'Home Button' {
      Looks {
        'Home Button': '2019_08_18_062608.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (- 550), y: (260));
          Set (size percentage: (60));
        }
        When tapped {
          Start (scene: ('Main Menu'));
        }
        When scene starts {
          Set (variable: ("Wave Number"), value: (1));
          Set (variable: ("Current Scene"), value: (1));
          Set (variable: ("global-firststarthealth"), value: (0));
          Set (variable: ("global-actualnumberofHealthPotions"), value: ("global-initialnumberofHealthPotions"));
          Set (variable: ("actual number of invulnerability potions"), value: ("Initial number of invulnerability potions"));
          Set (variable: ("actual number of agility potions"), value: ("initial number of agility potions"));
        }
      }
    }
    Actor or object 'skip' {
      Looks {
        'skip': 'skip.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (550), y: (262));
          Set (size percentage: (60));
        }
        When tapped {
          Start (scene: ('license'));
        }
      }
    }
  }
  Scene 'license' {
    Background {
      Looks {
        '2019_09_21_080316': '2019_09_21_080316.png'
      }
    }
    Actor or object 'Freesound' {
      Looks {
        'Freesound': 'My actor or object.png'
      }
      Scripts {
        When scene starts {
          Set (variable: ("freesound"), value: ('www.freesound.org under Creative Commons license'));
          Show (variable: ("freesound"), x: (50), y: (75), size: (120), color: ('#000000'), alignment: (centered));
          Set (variable: ("opengameart"), value: ('www.opengameart.org under GPL 3.0 license'));
          Show (variable: ("opengameart"), x: (50), y: (- 175), size: (120), color: ('#000000'), alignment: (centered));
          Set (variable: ("freesound2"), value: ('Audio Assets'));
          Show (variable: ("freesound2"), x: (50), y: (175), size: (135), color: ('#A743D1'), alignment: (centered));
          Set (variable: ("artcredit"), value: ('Art Assets'));
          Show (variable: ("artcredit"), x: (50), y: (- 75), size: (135), color: ('#A743D1'), alignment: (centered));
        }
      }
    }
    Actor or object 'shape' {
      Looks {
        'shape': 'My actor or object_#0.png'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (80));
          Place at (x: (50), y: (- 90));
        }
      }
    }
    Actor or object 'shape (1)' {
      Looks {
        'shape': 'My actor or object_#1.png'
      }
      Scripts {
        When scene starts {
          Set (size percentage: (80));
          Place at (x: (50), y: (161));
        }
      }
    }
    Actor or object 'Home Button' {
      Looks {
        'Home Button': '2019_08_18_062608.png'
      }
      Scripts {
        When scene starts {
          Place at (x: (- 550), y: (260));
          Set (size percentage: (80));
        }
        When tapped {
          Start (scene: ('Main Menu'));
        }
      }
    }
  }
}
