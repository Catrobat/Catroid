/*
 * Catroid: An on-device visual programming system for Android devices
 * Copyright (C) 2010-2018 The Catrobat Team
 * (<http://developer.catrobat.org/credits>)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * An additional term exception under section 7 of the GNU Affero
 * General Public License, version 3, is available at
 * http://developer.catrobat.org/license_additional_term
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        classpath 'io.fabric.tools:gradle:1.21.5'
    }
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.fabric.io/public' }
    maven { url 'https://maven.google.com' }
}

ext {
    appId = 'org.catrobat.catroid'
    appName = '@string/app_name'
    manifestAppName = '@string/app_name'
    manifestAppIcon = '@drawable/ic_launcher'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'checkstyle'
apply plugin: 'jacoco-android'
apply plugin: 'pmd'

apply from: 'gradle/code_quality_tasks.gradle'
apply from: 'gradle/intellij_config_tasks.gradle'
apply from: 'gradle/standalone_apk_tasks.gradle'
apply from: 'gradle/android_tasks.gradle'

check.dependsOn 'checkstyle'
check.dependsOn 'pmd'

// When -Pindependent was provided on the gradle command the APP name is changed.
// This allows to have multiple Catroid versions installed in parallel for testing purposes.
// Furthermore these installations do not interfere with the actual Catroid app.
if (project.hasProperty('independent')) {
    def today = new Date()
    appId += '.independent_' + today.format('YYYYMMdd_HHmm')
    appName = property('independent') ?: 'Code ' + today.format('MMdd HH:mm')
    manifestAppName = appName
}
ant.copy(file: 'google-services-template.json', tofile: 'google-services.json', overwrite: true)
ant.replace(file: 'google-services.json', token: '@appId@', value: appId)

jacoco {
    toolVersion = "0.8.1"
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true
}

android {
    dexOptions {
        javaMaxHeapSize "4g"
    }
    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/INDEX.LIST'  //compile problem with parrot arsdk
        exclude 'lib/arm64-v8a/*' // exclude all arm64-v8a libs as we don't have all libs for that architecture
        exclude 'lib/mips/*'      // Mips devices are deprecated
    }

    buildTypes {

        debug {
            buildConfigField "boolean", "FEATURE_EMBROIDERY_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_LEGO_NXT_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_LEGO_EV3_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PHIRO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PARROT_AR_DRONE_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PARROT_JUMPING_SUMO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_USERBRICKS_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_SCRATCH_CONVERTER_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_NFC_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_ARDUINO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_RASPI_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_POCKETMUSIC_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_CAST_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "true"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "true"
            resValue "string", "SNACKBAR_HINTS_ENABLED", "false"
            ext.enableCrashlytics = false
            testCoverageEnabled = true
        }
        release {
            buildConfigField "boolean", "FEATURE_EMBROIDERY_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_LEGO_NXT_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_LEGO_EV3_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PHIRO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PARROT_AR_DRONE_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PARROT_JUMPING_SUMO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_SCRATCH_CONVERTER_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_USERBRICKS_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_ARDUINO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_RASPI_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_NFC_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_POCKETMUSIC_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_CAST_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "false"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "true"
            resValue "string", "SNACKBAR_HINTS_ENABLED", "true"
        }
    }

    flavorDimensions "default"

    productFlavors {
        catroid {
            dimension "default"
            applicationId appId
            buildConfigField "String", "START_PROJECT", "\"No Starting Project\""
            buildConfigField "String", "PROJECT_NAME", "\"No Standalone Project\""
            buildConfigField "boolean", "FEATURE_APK_GENERATOR_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "false"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "true"
        }

        standalone {
            dimension "default"
            applicationId appId
            versionCode 1
            versionName '1.0'

            buildConfigField "String", "START_PROJECT", "\"$projectId\""
            buildConfigField "String", "PROJECT_NAME", "\"$appName\""
            // here!
            buildConfigField "boolean", "FEATURE_APK_GENERATOR_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "false"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "false"
        }

        createAtSchool {
            dimension "default"
            applicationId appId
            buildConfigField "String", "START_PROJECT", "\"No Starting Project\""
            buildConfigField "String", "PROJECT_NAME", "\"No Standalone Project\""
            buildConfigField "boolean", "FEATURE_APK_GENERATOR_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "false"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "false"
        }

        phiro {
            dimension "default"
            applicationId appId
            buildConfigField "String", "START_PROJECT", "\"No Starting Project\""
            buildConfigField "String", "PROJECT_NAME", "\"No Standalone Project\""
            buildConfigField "boolean", "FEATURE_APK_GENERATOR_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "false"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "false"
        }
    }
}

ext {
    projectVersion = "0.9"
}

configurations {
    implementation.exclude group: 'org.apache.sanselan' //compile problem with parrot arsdk
    implementation.exclude group: 'xpp3' //compile problem with xstream
    natives
}

dependencies {
    implementation 'com.parrot:arsdk:3.12.6'
    //CAST
    implementation 'com.google.android.gms:play-services-cast:12.0.0'

    //Analytics
    implementation 'com.google.android.gms:play-services-analytics:12.0.0'

    implementation 'com.google.guava:guava:19.0'
    implementation 'com.squareup.okhttp:okhttp:2.3.0'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.github.johnpersano:supertoasts:2.0@aar'
    implementation 'com.github.mrengineer13:snackbar:1.2.0'

    implementation 'com.koushikdutta.async:androidasync:2.+'
    implementation 'com.squareup.picasso:picasso:2.5.2'

    implementation ('com.thoughtworks.xstream:xstream:1.4.7') {
        exclude group: 'xmlpull'
    }
    implementation 'com.github.oliewa92:MidiDroid:v1.1'

    def gdxVersion = '1.6.2'
    implementation 'com.badlogicgames.gdx:gdx:' + gdxVersion
    implementation 'com.badlogicgames.gdx:gdx-backend-android:' + gdxVersion
    natives 'com.badlogicgames.gdx:gdx-platform:' + gdxVersion + ':natives-x86'
    natives 'com.badlogicgames.gdx:gdx-platform:' + gdxVersion + ':natives-armeabi'
    natives 'com.badlogicgames.gdx:gdx-platform:' + gdxVersion + ':natives-armeabi-v7a'
    implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"

    implementation 'com.facebook.android:facebook-android-sdk:4.14.1'
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support:design:27.1.0'
    implementation 'com.google.android.gms:play-services-auth:12.0.0'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.github.billthefarmer:mididriver:v1.13'

    implementation group: 'ar.com.hjg', name: 'pngj', version: '2.1.0'
    implementation fileTree(include: '*.jar', dir: 'src/main/libs')
    implementation fileTree(include: '*.jar', dir: 'src/main/libs-natives')
    androidTestImplementation fileTree(include: '*.jar', dir: 'src/androidTest/libs')
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'
    androidTestImplementation 'org.mockito:mockito-core:2.8.47'

    androidTestImplementation ('com.android.support.test:runner:1.0.1') {
        exclude group: 'com.android.support'
    }
    androidTestImplementation ('com.android.support.test.espresso:espresso-core:3.0.1') {
        exclude group: 'com.android.support'
    }
    androidTestImplementation ('com.android.support.test.espresso:espresso-contrib:3.0.1') {
        exclude group: 'com.android.support'
    }
    androidTestCompile ('com.android.support.test.espresso:espresso-intents:3.0.1') {
        exclude group: 'com.android.support'
    }

    implementation ('com.android.support.test.espresso:espresso-idling-resource:3.0.1') {
        exclude group: 'com.android.support'
    }

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.8.47'

    pmd (
            'net.sourceforge.pmd:pmd-core:5.8.1',
            'net.sourceforge.pmd:pmd-java:5.8.1'
    )

    checkstyle 'com.puppycrawl.tools:checkstyle:7.6'
    implementation ('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

def getCurrentGitBranch() {
    try {
        return 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
    } catch (IOException exception) {
        throw new UnsupportedOperationException("Could not find git! Maybe it is not in \$PATH variable?", exception)
    }
}

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 22
        applicationId appId
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        versionCode 45
        println "VersionCode is " + versionCode
        versionName "0.9.39"
        println "VersionName is " + versionName
        buildConfigField "String", "GIT_DESCRIBE", "\"${versionName}\""
        buildConfigField "String", "GIT_CURRENT_BRANCH", "\"${getCurrentGitBranch()}\""
        multiDexEnabled true
        manifestPlaceholders += [appName: manifestAppName, appIcon: manifestAppIcon]
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }

    lintOptions {
        // specific ignores should be defined via lint.xml file, all general ignores should be added here
        lintConfig file('config/lint.xml')
        // CommitPrefEdits should be reviewed, if using apply instead of commit is working with our tests
        // RtlSymmetry/RtlHardcoded should be reviewed
        // GradleDynamicVersion ignored - e.g. according to sdkmanager:gradle-plugin it should be imported this way
        // IconMissingDensityFolder - currently no xxxhdpi icons available
        // TODO ticket for HandlerLeak
        // TODO don't know if WrongRegion warning is a false-positive one
        ignore 'ContentDescription', 'InvalidPackage', 'ValidFragment', 'GradleDependency',
                'ClickableViewAccessibility', 'UnusedAttribute', 'CommitPrefEdits', 'OldTargetApi',
                'RtlSymmetry', 'GradleDynamicVersion', 'RtlHardcoded', 'HandlerLeak', 'IconMissingDensityFolder',
                'WrongRegion', 'RelativeOverlap', 'IconColors', 'MissingTranslation', 'ExtraTranslation',
                'GradleCompatible', 'WifiManagerLeak', 'ApplySharedPref', 'DefaultLocale', 'ObsoleteSdkInt',
                'StaticFieldLeak' , 'AppCompatResource'

        abortOnError false

        textReport true
        xmlReport true
        htmlReport true
        xmlOutput file("build/reports/lint-report.xml")
        htmlOutput file("build/reports/lint-report.html")
    }
}

project.gradle.taskGraph.whenReady {
    connectedCatroidDebugAndroidTest {
        ignoreFailures = true
    }
}

task copyAndroidNatives() {
    file("src/main/jniLibs/armeabi/").mkdirs()
    file("src/main/jniLibs/armeabi-v7a/").mkdirs()
    file("src/main/jniLibs/x86/").mkdirs()
    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/jniLibs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("src/main/jniLibs/armeabi")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/jniLibs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
apply plugin: 'com.google.gms.google-services'
