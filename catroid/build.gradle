/*
 * Catroid: An on-device visual programming system for Android devices
 * Copyright (C) 2010-2018 The Catrobat Team
 * (<http://developer.catrobat.org/credits>)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * An additional term exception under section 7 of the GNU Affero
 * General Public License, version 3, is available at
 * http://developer.catrobat.org/license_additional_term
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
    }
    dependencies {
        classpath 'io.fabric.tools:gradle:1.21.5'
        classpath 'com.google.gms:google-services:3.0.0'
    }
}

repositories {
    maven { url "https://jitpack.io" }
    maven { url 'https://maven.fabric.io/public' }
}

ext {
    appId = 'org.catrobat.catroid'
    appName = '@string/app_name'
    manifestAppName = '@string/app_name'
    manifestAppIcon = '@drawable/ic_launcher'
}

apply plugin: 'org.catrobat.gradle.androidemulators'

// The emulators to use on Jenkins.
// Note: When you specify new system images ensure that they are installed on the Docker image.
emulators {
    emulatorTemplate 'template1', {
        avd {
            systemImage = 'system-images;android-24;default;x86_64'
            sdcardSizeMb = 200
            hardwareProperties += ['hw.camera': 'yes', 'hw.ramSize': 800, 'hw.gpu.enabled': 'yes',
                                   'hw.camera.front': 'emulated', 'hw.camera.back': 'emulated', 'hw.gps': 'yes',
                                   'hw.mainKeys': 'no', 'hw.keyboard': 'yes', 'vm.heapSize': 128]
            screenDensity = 'xhdpi'
        }

        parameters {
            resolution = '768x1280'
            language = 'en'
            country = 'US'
        }
    }

    emulator 'android19', 'template1', {
        avd {
            systemImage = 'system-images;android-19;default;x86'
        }
    }

    emulator 'android24', 'template1', {
        avd {
            systemImage = 'system-images;android-24;default;x86_64'
        }
    }

    emulator 'android28', 'template1', {
        avd {
            systemImage = 'system-images;android-28;default;x86_64'
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'checkstyle'
apply plugin: 'jacoco-android'
apply plugin: 'pmd'

apply from: 'gradle/code_quality_tasks.gradle'
apply from: 'gradle/intellij_config_tasks.gradle'
apply from: 'gradle/standalone_apk_tasks.gradle'
apply from: 'gradle/release_crowdin_tasks.gradle'
apply from: 'gradle/release_fastlane_tasks.gradle'

check.dependsOn 'checkstyle'
check.dependsOn 'pmd'

// When -Pindependent was provided on the gradle command the APP name is changed.
// This allows to have multiple Catroid versions installed in parallel for testing purposes.
// Furthermore these installations do not interfere with the actual Catroid app.
if (project.hasProperty('independent')) {
    def today = new Date()
    appId += '.independent_' + today.format('YYYYMMdd_HHmm')
    appName = property('independent') ?: 'Code ' + today.format('MMdd HH:mm')
    manifestAppName = appName
}

if (!project.hasProperty("signingKeystore")) {
    ext.signingKeystore = "dummyKeystore"
}

ant.copy(file: 'google-services-template.json', tofile: 'src/catroid/google-services.json', overwrite: true)
ant.copy(file: 'google-services-template.json', tofile: 'src/createAtSchool/google-services.json', overwrite: true)
ant.copy(file: 'google-services-template.json', tofile: 'src/lunaAndCat/google-services.json', overwrite: true)
ant.copy(file: 'google-services-template.json', tofile: 'src/phiro/google-services.json', overwrite: true)
ant.copy(file: 'google-services-template.json', tofile: 'src/standalone/google-services.json', overwrite: true)

ant.replace(file: 'src/catroid/google-services.json', token: '@appId@', value: appId)
ant.replace(file: 'src/createAtSchool/google-services.json', token: '@appId@', value: appId + ".createatschool")
ant.replace(file: 'src/lunaAndCat/google-services.json', token: '@appId@', value: appId + ".lunaandcat")
ant.replace(file: 'src/phiro/google-services.json', token: '@appId@', value: appId + ".phiro")
ant.replace(file: 'src/standalone/google-services.json', token: '@appId@', value: appId + ".standalone")

if (project.hasProperty('firebaseApiKey')) {
    ant.replace(file: 'src/catroid/google-services.json', token: '@apiKey@', value: project.getProperties().get('firebaseApiKey'))
    ant.replace(file: 'src/createAtSchool/google-services.json', token: '@apiKey@', value: project.getProperties().get('firebaseApiKey'))
    ant.replace(file: 'src/lunaAndCat/google-services.json', token: '@apiKey@', value: project.getProperties().get('firebaseApiKey'))
    ant.replace(file: 'src/phiro/google-services.json', token: '@apiKey@', value: project.getProperties().get('firebaseApiKey'))
    ant.replace(file: 'src/standalone/google-services.json', token: '@apiKey@', value: project.getProperties().get('firebaseApiKey'))
}

if (project.hasProperty('fabricApiKey')) {
    ant.replace(file: 'fabric.properties', token: '0123456789012345678901234567890123456789',
            value: project.getProperties().get('fabricApiKey'))
}
if (project.hasProperty('fabricApiSecret')) {
    ant.replace(file: 'fabric.properties',
            token: '0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef',
            value: project.getProperties().get('fabricApiSecret'))
}

def useAndroidLocales() {
    def value = project.getProperties().get("useAndroidLocales")
    return value != null ? "true" : "false"
}

jacoco.toolVersion = "0.8.1"

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true
}

android {
    compileSdkVersion 26

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 26
        applicationId appId
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
        versionCode 55
        println "VersionCode is $versionCode"
        versionName "0.9.49"
        println "VersionName is $versionName"
        buildConfigField "String", "GIT_COMMIT_INFO", "\"${getGitCommitInfo()}\""
        buildConfigField "String", "MAIN_URL_HTTPS", (project.hasProperty('useWebTest') ? '"https://web-test.catrob.at"' : '"https://share.catrob.at"')
        multiDexEnabled true
        manifestPlaceholders += [appName: manifestAppName,
                                 appIcon: manifestAppIcon,
                                 intentFilterScheme: "https",
                                 intentFilterHost: "share.catrob.at",
                                 intentFilterPathPattern: "/.*/program/.*"]
    }

    lintOptions {
        lintConfig file('config/lint.xml')
        // IconMissingDensityFolder: we do not provide xxxhdpi icons (yet).
        ignore 'ContentDescription', 'InvalidPackage', 'GradleDependency',
                'ClickableViewAccessibility', 'UnusedAttribute', 'CommitPrefEdits', 'OldTargetApi',
                'RtlSymmetry', 'RtlHardcoded', 'HandlerLeak', 'IconMissingDensityFolder',
                'WrongRegion', 'RelativeOverlap', 'IconColors', 'MissingTranslation', 'ExtraTranslation',
                'GradleCompatible', 'WifiManagerLeak', 'ApplySharedPref', 'ObsoleteSdkInt',
                'StaticFieldLeak'

        abortOnError false

        textReport true
        xmlReport true
        htmlReport true
        xmlOutput file("build/reports/lint-report.xml")
        htmlOutput file("build/reports/lint-report.html")
    }

    dexOptions.javaMaxHeapSize "4g"

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/INDEX.LIST'  //compile problem with parrot arsdk
        exclude 'lib/arm64-v8a/*' // exclude all arm64-v8a libs as we don't have all libs for that architecture
        exclude 'lib/x86_64/*'    // exclude all x86_64 libs as we don't have all libs for that architecture
        exclude 'lib/mips/*'      // Mips devices are deprecated
         exclude 'lib/armeabi/*'  // aremabiv5 & v6 are deprecated
    }

    signingConfigs {
        signedRelease {
            // credentials loaded in release_task.gradle
            storeFile file(project["signingKeystore"])
            storePassword ""
            keyAlias ""
            keyPassword ""
        }
    }

    if (project.hasProperty("signingKeystore") && project.hasProperty("signingKeystorePassword") &&
            project.hasProperty("signingKeyAlias") && project.hasProperty("signingKeyPassword")) {
        android.signingConfigs.signedRelease.storePassword = project.getProperties().get("signingKeystorePassword")
        android.signingConfigs.signedRelease.keyAlias = project.getProperties().get("signingKeyAlias")
        android.signingConfigs.signedRelease.keyPassword = project.getProperties().get("signingKeyPassword")
    }

    buildTypes {
        debug {
            buildConfigField "boolean", "FEATURE_EMBROIDERY_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_LEGO_NXT_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_LEGO_EV3_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PHIRO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PARROT_AR_DRONE_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PARROT_JUMPING_SUMO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_USERBRICKS_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_SCRATCH_CONVERTER_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_NFC_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_ARDUINO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_RASPI_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_POCKETMUSIC_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_CAST_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "true"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "true"
            buildConfigField "boolean", "USE_ANDROID_LOCALES_FOR_SCREENSHOTS", useAndroidLocales()
            resValue "string", "SNACKBAR_HINTS_ENABLED", "false"
            ext.enableCrashlytics = false
            testCoverageEnabled = project.hasProperty('enableCoverage')
        }

        release {
            buildConfigField "boolean", "FEATURE_EMBROIDERY_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_LEGO_NXT_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_LEGO_EV3_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PHIRO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PARROT_AR_DRONE_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_PARROT_JUMPING_SUMO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_SCRATCH_CONVERTER_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_USERBRICKS_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_ARDUINO_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_RASPI_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_NFC_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_POCKETMUSIC_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_CAST_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "false"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "true"
            buildConfigField "boolean", "USE_ANDROID_LOCALES_FOR_SCREENSHOTS", "false"
            resValue "string", "SNACKBAR_HINTS_ENABLED", "true"
        }

        signedRelease.initWith(buildTypes.release)
        signedRelease {
            signingConfig signingConfigs.signedRelease
        }
    }

    flavorDimensions "default"

    productFlavors {
        catroid {
            dimension "default"
            applicationId appId
            buildConfigField "String", "START_PROJECT", "\"No Starting Project\""
            buildConfigField "String", "PROJECT_NAME", "\"No Standalone Project\""
            buildConfigField "boolean", "FEATURE_APK_GENERATOR_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "false"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "true"
        }

        standalone {
            dimension "default"
            applicationId appId + '.standalone'

            versionCode 1
            versionName '1.0'

            buildConfigField "String", "START_PROJECT", "\"$projectId\""
            buildConfigField "String", "PROJECT_NAME", "\"$appName\""
            // here!
            buildConfigField "boolean", "FEATURE_APK_GENERATOR_ENABLED", "true"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "false"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "false"
        }

        createAtSchool {
            dimension "default"
            applicationId appId + '.createatschool'

            buildConfigField "String", "START_PROJECT", "\"No Starting Project\""
            buildConfigField "String", "PROJECT_NAME", "\"No Standalone Project\""
            buildConfigField "boolean", "FEATURE_APK_GENERATOR_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "false"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "true"
        }

        lunaAndCat {
            dimension "default"
            applicationId appId + '.lunaandcat'

            buildConfigField "String", "START_PROJECT", "\"No Starting Project\""
            buildConfigField "String", "PROJECT_NAME", "\"No Standalone Project\""
            buildConfigField "boolean", "FEATURE_APK_GENERATOR_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "false"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "true"
        }

        phiro {
            dimension "default"
            applicationId appId + '.phiro'

            buildConfigField "String", "START_PROJECT", "\"No Starting Project\""
            buildConfigField "String", "PROJECT_NAME", "\"No Standalone Project\""
            buildConfigField "boolean", "FEATURE_APK_GENERATOR_ENABLED", "false"
            buildConfigField "boolean", "FEATURE_CLOUD_MESSAGING_ENABLED", "false"
            buildConfigField "boolean", "CRASHLYTICS_CRASH_REPORT_ENABLED", "false"
        }
    }
}

ext {
    projectVersion = "0.9"
    gdxVersion = "1.6.2"
    mockitoVersion = "2.8.47"
    espressoVersion = "3.0.1"
    supportLibraryVersion = "27.1.0"
    paintroidVersion = "2.3.0"
}

configurations {
    implementation.exclude group: 'org.apache.sanselan' //compile problem with parrot arsdk
    implementation.exclude group: 'xpp3' //compile problem with xstream
    natives
}

dependencies {
    implementation fileTree(include: '*.jar', dir: 'src/main/libs')
    implementation fileTree(include: '*.jar', dir: 'src/main/libs-natives')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Support libraries
    implementation "com.android.support:appcompat-v7:$supportLibraryVersion"
    implementation "com.android.support:mediarouter-v7:$supportLibraryVersion"
    implementation "com.android.support:cardview-v7:$supportLibraryVersion"
    implementation "com.android.support:design:$supportLibraryVersion"
    implementation "com.android.support:customtabs:$supportLibraryVersion"

    implementation "com.android.support.test.espresso:espresso-idling-resource:$espressoVersion"
    implementation 'com.android.support:multidex:1.0.3'

    // Drone
    implementation 'com.parrot:arsdk:3.12.6'

    // CAST
    implementation 'com.google.android.gms:play-services-cast:12.0.0'

    // Analytics
    implementation 'com.google.android.gms:play-services-analytics:12.0.0'

    implementation 'com.google.guava:guava:19.0'
    implementation 'com.squareup.okhttp:okhttp:2.3.0'
    implementation 'com.google.code.gson:gson:2.8.0'

    implementation 'com.koushikdutta.async:androidasync:2.2.1'
    implementation 'com.squareup.picasso:picasso:2.5.2'
    implementation 'ar.com.hjg:pngj:2.1.0'

    implementation ('com.thoughtworks.xstream:xstream:1.4.7') {
        exclude group: 'xmlpull'
    }

    // Pocket Music
    implementation 'com.github.oliewa92:MidiDroid:v1.1'
    implementation 'com.github.billthefarmer:mididriver:v1.13'

    // Pocket Paint
    catroidImplementation "org.catrobat.paintroid:paintroid:$paintroidVersion"
    createAtSchoolImplementation "org.catrobat.paintroid:paintroid:$paintroidVersion"
    lunaAndCatImplementation "org.catrobat.paintroid:paintroid:$paintroidVersion"
    phiroImplementation "org.catrobat.paintroid:paintroid:$paintroidVersion"

    // libGDX
    implementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
    implementation "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"

    implementation 'com.facebook.android:facebook-android-sdk:4.14.1'
    implementation 'com.google.android.gms:play-services-auth:12.0.0'

    androidTestImplementation ('tools.fastlane:screengrab:1.1.0'){
        exclude group: 'com.android.support'
    }
    androidTestImplementation ('com.android.support.test.espresso:espresso-web:3.0.1') {
        exclude group: 'com.android.support'
    }

    implementation ('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true
    }

    testImplementation 'junit:junit:4.12'
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

    androidTestImplementation fileTree(include: '*.jar', dir: 'src/androidTest/libs')
    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'
    androidTestImplementation "org.mockito:mockito-core:$mockitoVersion"

    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espressoVersion"

    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    pmd 'net.sourceforge.pmd:pmd-core:5.8.1'
    pmd 'net.sourceforge.pmd:pmd-java:5.8.1'

    checkstyle 'com.puppycrawl.tools:checkstyle:7.6'
}

static def getGitCommitInfo() {
    def hash = 'git rev-parse --short HEAD'.execute().text.trim()
    def branch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()

    return "branch $branch @$hash"
}

project.gradle.taskGraph.whenReady {
    connectedCatroidDebugAndroidTest.ignoreFailures = true
}

task copyAndroidNatives() {
    file("src/main/jniLibs/armeabi-v7a/").mkdirs()
    file("src/main/jniLibs/x86/").mkdirs()
    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("src/main/jniLibs/armeabi-v7a")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("src/main/jniLibs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
apply plugin: 'com.google.gms.google-services'
