#!groovy

pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile.jenkins'
            // 'docker build' would normally copy the whole build-dir to the container, changing the
            // docker build directory avoids that overhead
            dir 'docker'
            // Pass the uid and the gid of the current user (jenkins-user) to the Dockerfile, so a
            // corresponding user can be added. This is needed to provide the jenkins user inside
            // the container for the ssh-agent to work.
            // Another way would be to simply map the passwd file, but would spoil additional information
            // Also hand in the group id of kvm to allow using /dev/kvm.
            additionalBuildArgs '--build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) --build-arg KVM_GROUP_ID=$(getent group kvm | cut -d: -f3)'
            args '--device /dev/kvm:/dev/kvm -v /var/local/container_shared/gradle_cache/$EXECUTOR_NUMBER:/home/user/.gradle -m=6.5G'
            label 'LimitedEmulator'
        }
    }

    options {
        timeout(time: 2, unit: 'HOURS')
        timestamps()
    }

    stages {
        stage('Prepare build') {
            steps {
                script {
                    currentBuild.displayName = "#${env.BUILD_NUMBER} | ${env.flavor} | ${env.gitBranch}"
                }
            }
        }

        stage('Build signed APK') {
            steps {
                // Build, zipalign and sign releasable APK
                withCredentials([file(credentialsId: 'a925b6e8-b3c6-407e-8cad-65886e330037', variable: 'SIGNING_KEYSTORE')]) {
                    script {
                        if (env.flavor == 'All') {
                            sh '''
                                set +x
                                ./gradlew assembleSignedRelease \
                                -PsigningKeystore=${SIGNING_KEYSTORE} \
                                -PsigningKeystorePassword=$signingKeystorePassword \
                                -PsigningKeyAlias=$signingKeyAlias \
                                -PsigningKeyPassword=$signingKeyPassword \
                                -PfirebaseApiKey=$firebaseApiKey \
                                -PfabricApiKey=$fabricApiKey \
                                -PfabricApiSecret=$fabricApiSecret
                            '''
                        } else if (env.flavor == 'Playground') {
                            sh '''
                                set +x
                                ./gradlew assembleCatroidSignedRelease \
                                -PsigningKeystore=${SIGNING_KEYSTORE} \
                                -PsigningKeystorePassword=$signingKeystorePassword \
                                -PsigningKeyAlias=$signingKeyAlias \
                                -PsigningKeyPassword=$signingKeyPassword \
                                -PfirebaseApiKey=$firebaseApiKey \
                                -PfabricApiKey=$fabricApiKey \
                                -PfabricApiSecret=$fabricApiSecret \
                                -Pplayground=true
                            '''
                        } else {
                            sh '''
                                set +x
                                ./gradlew assemble${flavor}SignedRelease \
                                -PsigningKeystore=${SIGNING_KEYSTORE} \
                                -PsigningKeystorePassword=$signingKeystorePassword \
                                -PsigningKeyAlias=$signingKeyAlias \
                                -PsigningKeyPassword=$signingKeyPassword \
                                -PfirebaseApiKey=$firebaseApiKey \
                                -PfabricApiKey=$fabricApiKey \
                                -PfabricApiSecret=$fabricApiSecret
                            '''
                        }
                    }
                }
                archiveArtifacts artifacts: 'catroid/build/outputs/apk/**/*signedRelease.apk', fingerprint: true
            }
        }

        stage('Approve upload') {
            options {
                timeout(time: 60, unit: 'MINUTES')
            }
            steps {
                script {
                    env.APPROVE_UPLOAD_APK = input message: 'User input required',
                        parameters: [choice(name: 'Upload', choices: 'no\nyes',
                        description: 'Do you want to upload this APK to Alpha Channel on Google Play?')]
                }
            }
        }

        stage('Upload AKP to Alpha') {
            when {
                environment name: 'APPROVE_UPLOAD_APK', value: 'yes'
            }
            steps {
                script {
                    if (env.flavor == 'All') {
                        sh '''
                            fastlane android upload_APK_Catroid 
                            fastlane android upload_APK_CreateAtSchool
                            fastlane android upload_APK_LunaAndCat 
                            fastlane android upload_APK_Arduino 
                            fastlane android upload_APK_Phiro 
                        '''
                    } else {
                        sh 'fastlane android upload_APK_${flavor}'
                    }
                }
            }
        }
    }

    post {
        always {
            // clean workspace
            deleteDir()
        }
    }
}
