to startup
	load "sprite
	load "thread
	load "commands
	sprite-startup
	thread-startup
	make "cycle 0
	ifelse applet?
		[openurl]
		[open "dot]
	if autostart? [greenflag]
end

to greenflag
	stopAll
	dolist [o fput stage sprites] [
		talkto :o
		dolist [scr scripts] [
			if (first :scr) = [EventHatMorph Scratch-StartClicked] [ignore start-script :o :scr false]
		]
	]
	interact
end

to interact
	redrawall
	requestFocus
	loop [runstep]
end

to runstep
	let [t %timer]
	handle-keystrokes
	handle-mouseclicks
	step-all-threads
	updatePenTrails
	updateWatchers
	updateListWatchers
	redraw
	make "t %timer - :t
	if :t < 30 [mwait 30 - :t] ; limit speed to 33 frames/sec
end

to updateWatchers
	dolist [w sprites] [
		if (watcher? :w) [
			let [
				op (get :w "op)
				param (get :w "param)
				val 0]
			talkto (get :w "target)
			ifelse empty? :param
				[make "val run (list :op)]
				[make "val run (list :op (quote :param))]
			setWatcherText :w :val]]
end

to updateListWatchers
	make "cycle ((:cycle + 1) % 5)
	if (:cycle = 0) [
		dolist [w sprites] [
			if (listWatcher? :w) [clearListWatcherHighlights :w]]]
end
		
; for debugging; run a script to completion on the current sprite
to do :cmds
	stopAll
	ignore start-thread who :cmds
	loop [
		if (count :<threads>) = 0 [stop]
		runstep]
end
