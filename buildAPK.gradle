import org.rauschig.jarchivelib.ArchiverFactory
import static org.rauschig.jarchivelib.ArchiveFormat.ZIP

buildscript {
    dependencies {
        repositories {
            mavenCentral()
        }
        classpath 'org.rauschig:jarchivelib:0.6.0'
    }
}

apply plugin: 'com.android.application'
android {
    productFlavors {
        catroid {
            applicationId 'org.catrobat.catroid'
        }

        standalone {
            applicationId 'org.catrobat.catroid.' + getPackageNameSuffix()
        }
    }
}

def getPackageNameSuffix() {
    if (project.hasProperty("suffix")) {
        return project["suffix"]
    } else {
        return "standalone"
    }
}

def getProjectName(String xml) {
    def program = new XmlSlurper().parseText(xml)
    project.ext.projectName = program.header.programName.text()
    return project.ext.projectName
}

def renameZipFile() {
    def zipFile = new File('catroid/assets/project.zip')
    zipFile.renameTo 'catroid/assets/' + project.ext.projectName + '.zip'  //TODO remove illegal characters
}

task buildStandalone(dependsOn: ':downloadProject') << {
    def manifestFile = new File("catroid/AndroidManifest.xml");
    def manifest = manifestFile.text;
    manifest = manifest.replaceAll("@string/app_name", (String) getProjectName(new File('catroid/assets/standalone/code.xml').text));
    manifestFile.write(manifest)
    renameZipFile()
}

task downloadProject() << {
    def id = 719; //TODO temorary placeholder for the projectID. remove later on
    if (project.hasProperty("projectID")) {
        id = project["projectID"]
    }
    println "Downloading project with id: " + id
    def url = "https://pocketcode.org/download/" + id + ".catrobat"
    File temp = new File("catroid/assets/", 'project.zip')
    temp.withOutputStream {
        it << new URL(url).content
    }

    unzipProject(temp)
}

def unzipProject(File tmp) {
    ArchiverFactory.createArchiver(ZIP).extract(tmp, new File("catroid/assets/standalone/"))
}

gradle.projectsEvaluated {
    assembleStandaloneDebug.mustRunAfter buildStandalone
}

task commandlineAdbInstallDebug(dependsOn: ':commandlineAdbInstallCatroidDebug') << {}
task commandlineAdbInstallDebugTest(dependsOn: 'commandlineAdbInstallCatroidDebugTest') << {}
task assembleDebugTest(dependsOn: ':assembleCatroidDebugTest') << {}
