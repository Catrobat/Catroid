#!/usr/bin/env python3

import os
import sys
import subprocess

os.environ['SCRIPT_DIR'] = os.path.dirname(os.path.realpath(__file__))
os.environ['REPO_DIR'] = os.path.realpath(os.path.join(os.environ['SCRIPT_DIR'], ".."))

import build_helper_functions

def usage():
    print(sys.argv[0] + """ <class_or_package>

This scripts runs all the tests on an emulator. The emulator is configured
in 'emulator_config.ini'. A single class or package to test can be passed
as single command line argument.

The environment variable ANDROID_SDK_ROOT needs to be set.

Be aware that Jenkins cleans the workspace before every build, this can
be partly replicated by './gradlew clean'.""")

def detect_class_or_package(class_or_package):
    if class_or_package is None or class_or_package == "":
        return ""

    package_candidate_dir = os.path.join(os.environ['REPO_DIR'], 'catroid', 'src', 'androidTest', 'java', class_or_package.replace('.', os.path.sep))
    class_candidate_file = package_candidate_dir + ".java"

    if os.path.isdir(package_candidate_dir):
        return "-Pandroid.testInstrumentationRunnerArguments.package=" + class_or_package
    elif os.path.isfile(class_candidate_file):
        return "-Pandroid.testInstrumentationRunnerArguments.class=" + class_or_package
    else:
        print("The given test runner argument [{}] neither matches a package [{}] nor a class/java-file [{}], abort".format(class_or_package, package_candidate_dir, class_candidate_file))
        sys.exit(1)

build_helper_functions.check_number_of_parameters(valid_param_count_min=0, valid_param_count_max=1, usage_func=usage)

## detect if package or class is given
test_runner_arg = ""
if len(sys.argv) > 1:
    test_runner_arg = detect_class_or_package(sys.argv[1])

build_helper_functions.bring_emulator_in_running_state()

## DISABLE animations
disable_cmd = build_helper_functions.get_jenkins_android_helper_executable('jenkins_android_emulator_helper') + [ '-D' ]
print("Calling: " + " ".join(disable_cmd))
return_code = subprocess.run( disable_cmd, cwd=os.environ['REPO_DIR'] ).returncode

## RUN tests
test_runner_cmd = build_helper_functions.get_jenkins_android_helper_executable('jenkins_android_cmd_wrapper') + [ '-I', build_helper_functions.get_relative_gradle_name(), 'clean', 'adbDisableAnimationsGlobally', 'createCatroidDebugAndroidTestCoverageReport' ]
if test_runner_arg is not None and test_runner_arg != "":
    test_runner_cmd = test_runner_cmd + [ test_runner_arg ]

print("Calling: " + " ".join(test_runner_cmd))
return_code = subprocess.run( test_runner_cmd, cwd=os.environ['REPO_DIR'] ).returncode
sys.exit(return_code)
