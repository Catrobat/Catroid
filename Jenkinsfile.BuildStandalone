#!groovy

def standaloneApk = 'catroid/build/outputs/apk/standalone/debug/catroid-standalone-debug.apk'

pipeline {
    agent {
        dockerfile {
            filename 'Dockerfile.jenkins'
            // 'docker build' would normally copy the whole build-dir to the container, changing the
            // docker build directory avoids that overhead
            dir 'docker'
            // Pass the uid and the gid of the current user (jenkins-user) to the Dockerfile, so a
            // corresponding user can be added. This is needed to provide the jenkins user inside
            // the container for the ssh-agent to work.
            // Another way would be to simply map the passwd file, but would spoil additional information
            // Also hand in the group id of kvm to allow using /dev/kvm.
            additionalBuildArgs '--build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) --build-arg KVM_GROUP_ID=$(getent group kvm | cut -d: -f3)'
            args '--device /dev/kvm:/dev/kvm -v /var/local/container_shared/gradle_cache/$EXECUTOR_NUMBER:/home/user/.gradle'
            // Add specific 'Standalone'-label, so it can be made sure, that there is a dedicated host for standalone builds
            label 'Standalone'
        }
    }

    options {
        timeout(time: 600, unit: 'SECONDS')
        timestamps()
    }

    stages {
        stage('Prepare build') {
            steps {
                script {
                    currentBuild.displayName = "${env.DOWNLOAD}"
                }
            }
        }

        stage('Check-for-invalid-program-upload') {
            steps {
                script {
                    def ret = sh script: "./buildScripts/checkUrlExists.sh '$env.DOWNLOAD'", returnStatus: true
                    if (ret == 200) {
                        // Handle special error from the script, if the program download was not
                        // possible because of the HTTP error 528, we set the build to UNSTABLE
                        currentBuild.result = 'UNSTABLE'
                    } else if (ret != 0) {
                        currentBuild.result = 'FAILURE'
                    }
                }
            }
        }

        stage('Build APK') {
            // needed, as long as we mark the build unstable when we receive the 528 error from WEB
            when {
                expression {
                    currentBuild.result == null
                }
            }

            steps {
                sh "./gradlew clean assembleStandaloneDebug -Papk_generator_enabled=true -Psuffix='$SUFFIX' -Pdownload='$DOWNLOAD'"
                archiveArtifacts standaloneApk
            }
        }

        stage('Upload to Web') {
            // needed, as long as we mark the build unstable when we receive the 528 error from WEB
            when {
                expression {
                    currentBuild.result == null
                }
            }

            steps {
                script {
                    uploadFileToWeb standaloneApk, "${env.UPLOAD}"
                }
            }
        }
    }

    post {
        always {
            step([$class: 'LogParserPublisher', failBuildOnError: true, projectRulePath: 'buildScripts/log_parser_rules', unstableOnWarning: true, useProjectRule: true])
        }
        failure {
            notifyChat(['#ci-status', '#ci-status-standalone'])
        }
    }
}
